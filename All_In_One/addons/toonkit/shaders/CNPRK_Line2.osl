/*----------------------------------------- */
/*   Copyright (C) Cogumelo Softworks - ToonKit for Cycles v1.1
/*   Deterministic Line Rendering
/*------------------------------------------*/

shader LineRender(
    int UseGlobal = 1,
    int Relative = 0,
    int UseSiluette = 1,
    int UseObj = 1,
    int UseNormal = 1,
    int UseDepth = 1,
    int Mode = 0,
    int UseAllPasses = 0,
    color VertexMask = 1.0,
    float Size = 0.1,
    float NormalLimit = 0.9,
    float DepthLimit = 0.1,
    float ClampDistance = 999,
    float ClampAngle = 0.4,
    
    output color Result = 1.0)
{   
    
    if(UseAllPasses == 0 ){
        if(raytype("camera") != 1){
            return;
        }
    }
    
    string selfName;
    getattribute("geom:name", selfName);
    if(startswith(selfName,"-")){
        return;
    }
    

    float L; 
    vector disturb;
    vector normHit;
    vector normP;
    

    point CamPos = point("camera",0,0,0);
    L = length((vector)transform("world", "camera", P));
    
    vector angles[4] = {
        vector(1,0,0),
        vector(-1,0,0),
        vector(0,1,0),
        vector(0,-1,0)            
    };

    if(Mode == 1){
        angles[0] = vector(1,1,0);
        angles[1] = vector(-1,1,0);
        angles[2] = vector(1,-1,0);
        angles[3] = vector(-1,-1,0);
    }
    
    for(int i = 0; i< arraylength(angles); i++){
        vector rasterPoint;
        
        if(Relative){
            rasterPoint = transform("world","camera",P-CamPos) + angles[i] * Size * 0.01 ;
        }
        else{
            rasterPoint = transform("world","camera",P-CamPos) + angles[i] * Size * 0.01 * L;
        }
        
       vector finalPoint = transform("camera","world",rasterPoint);
        
       int ray = 0;
       ray = trace(CamPos, normalize(finalPoint), "mindist", L-ClampDistance);

        if(ray){
            
            if(isconnected(VertexMask)){
                color col = color(-1,-1,-1);
                getmessage("trace","Col",col);
                if(col[0] != -1){
                    Result *= distance(VertexMask,col) > 0.3 ? 0 : 1;
                }
            }

            if(UseNormal){
                getmessage("trace","N",normHit);
                Result *= distance(normalize(normHit),normalize(N)) > NormalLimit ? 0 : 1;
            }

            if(UseDepth){
                getmessage("trace","P",normP);
                getmessage("trace","N",normHit);
                vector rayDirection = normalize(vector(normP[0]-CamPos[0],normP[1]-CamPos[1],normP[2]-CamPos[2]));
                float a = (dot(normalize(normHit),normalize(finalPoint)));
                if(abs(a) > ClampAngle){
                    Result *= distance(normP,P) > DepthLimit ? 0 : 1 ;
                }
            }
            
            if(UseObj){
                string nameHit = "";
                getmessage("trace","geom:name",nameHit);
                Result *= (nameHit != selfName) ? 0 : 1 ;
                if(startswith(nameHit,"-")){
                    Result = 1;
                }
            }
        }
        
        else{
            Result = 0;
        }
        
        if(Result == 0){return;}
    }
}