# ##### BEGIN GPL LICENSE BLOCK #####
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####
import bpy
from mathutils import Vector, Color

excludes =[
    '__doc__', '__module__', '__slots__', 'bl_description', 'bl_height_default',
    'bl_height_max', 'bl_height_min', 'bl_icon', 'bl_label',
    'bl_rna', 'bl_static_type', 'bl_width_default', 'bl_width_max',
    'bl_width_min', 'color', 'dimensions', 'draw_buttons', 'draw_buttons_ext',
    'input_template', 'inputs', 'internal_links', 'interface',
    'is_registered_node_type',
    'output_template', 'outputs', 'poll', 'poll_instance', 'rna_type',
    'shading_compatibility',
    'socket_value_update', 'status', 'type', 'update']

def socket_order(sockets, socket):
    ''' We need socket orders as well as names '''
    for i, current_socket in enumerate(sockets):
        if current_socket == socket:
            return i
    raise ValueError("Socket not in sockets") # Shouldn't happen


def get_links(node_group):
    ''' utility function for python console for building rest of file '''
    result = []
    for link in node_group.links:
        from_node, to_node = (link.from_node, link.to_node)
        from_socket, to_socket = (link.from_socket, link.to_socket)
        result.append({
            'from_node': from_node.name, 'to_node': to_node.name,
            'from_socket': from_socket.name, 'to_socket':to_socket.name,
            'from_order': socket_order(from_node.outputs, from_socket),
            'to_order': socket_order(to_node.inputs, to_socket)})
    return result

def get_nodes(node_group):
    ''' utitility function for python console for building rest of file '''
    result = []
    for node in node_group.nodes:
        node_data = {}
        for prop in dir(node):
            if not prop in excludes:
                value = getattr(node, prop)
                # Crude Sanitization
                if type(value) == bpy.types.ShaderNodeTree:
                    value = value.name
                # End Sanitization
                node_data[prop] = value
        result.append(node_data)
    return result

def get_defaults(node_group):
    ''' get 'dem default values for inputs and outputs, not doing props yet '''
    result = {}
    for node in node_group.nodes:
        inp_vals = [inp.default_value for inp in node.inputs if 'default_value' in dir(inp)]
        out_vals = [out.default_value for out in node.outputs if 'default_value' in dir(out)]
        result[node.name]=(inp_vals, out_vals)
    return result

LE_nodes= [
    {   'bl_idname': 'NodeReroute',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-223.17919921875, -63.35205078125)),
        'mute': False, 'name': 'Reroute', 'parent': None, 'select': False,
        'show_options': True, 'show_preview': False, 'show_texture': False,
        'use_custom_color': False,
        'width': 16.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-134.40249633789062, -68.07257080078125)),
        'mute': False, 'name': 'Math.001', 'operation': 'GREATER_THAN',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': True, 'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((281.43408203125, 73.5264892578125)),
        'mute': False, 'name': 'Math.003', 'operation': 'ADD',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': True, 'use_custom_color': False, 'width': 140.0,
        'width_hidden': 42.0},
    {   'bl_idname': 'NodeReroute',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-281.43408203125, -160.28656005859375)),
        'mute': False, 'name': 'Reroute.001', 'parent': None,
        'select': False, 'show_options': True, 'show_preview': False,
        'show_texture': False, 'use_custom_color': False,
        'width': 16.0, 'width_hidden': 42.0},
    {   'bl_idname': 'NodeGroupOutput',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((481.43408203125, -0.0)), 'mute': False,
        'name': 'Group Output', 'parent': None, 'select': False,
        'show_options': True, 'show_preview': False, 'show_texture': False,
        'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'NodeGroupInput',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-584.6227416992188, -40.08393096923828)),
        'mute': False, 'name': 'Group Input', 'parent': None,
        'select': False, 'show_options': True, 'show_preview': False,
        'show_texture': False,
        'use_custom_color': False, 'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-136.79672241210938, 113.46240234375)),
        'mute': False, 'name': 'Math', 'operation': 'LESS_THAN',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': True, 'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((66.54563903808594, -60.17513656616211)),
        'mute': False, 'name': 'Math.002', 'operation': 'SUBTRACT',
        'parent': None, 'select': True, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': True, 'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0}]

GE_nodes = [
    {   'bl_idname': 'NodeReroute',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-223.17919921875, -63.35205078125)),
        'mute': False, 'name': 'Reroute', 'parent': None,
        'select': True, 'show_options': True, 'show_preview': False,
        'show_texture': False,
        'use_custom_color': False, 'width': 16.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-136.79672241210938, 113.46240234375)),
        'mute': False, 'name': 'Math', 'operation': 'LESS_THAN',
        'parent': None, 'select': True, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': True, 'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-134.40249633789062, -68.07257080078125)),
        'mute': False, 'name': 'Math.001', 'operation': 'GREATER_THAN',
        'parent': None, 'select': True, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': True, 'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((74.24627685546875, 160.2864990234375)),
        'mute': False, 'name': 'Math.002', 'operation': 'SUBTRACT',
        'parent': None, 'select': True, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': True, 'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((281.43408203125, 73.5264892578125)),
        'mute': False, 'name': 'Math.003', 'operation': 'ADD',
        'parent': None, 'select': True, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': True, 'use_custom_color': False, 'width': 140.0,
        'width_hidden': 42.0},
    {   'bl_idname': 'NodeReroute',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-281.43408203125, -160.28656005859375)),
        'mute': False, 'name': 'Reroute.001', 'parent': None,
        'select': True, 'show_options': True, 'show_preview': False,
        'show_texture': False, 'use_custom_color': False,
        'width': 16.0, 'width_hidden': 42.0},
    {   'bl_idname': 'NodeGroupInput',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-481.43408203125, -0.0)), 'mute': False,
        'name': 'Group Input', 'parent': None, 'select': True,
        'show_options': True, 'show_preview': False, 'show_texture': False,
        'use_custom_color': False, 'width': 140.0,
        'width_hidden': 42.0},
    {   'bl_idname': 'NodeGroupOutput',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((481.43408203125, -0.0)), 'mute': False,
        'name': 'Group Output', 'parent': None, 'select': True,
        'show_options': True, 'show_preview': False, 'show_texture': False,
        'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0}]

BETWEEN_nodes = [
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((93.57553100585938, 46.32426452636719)),
        'mute': False, 'name': 'Math.002', 'operation': 'MULTIPLY',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': True, 'use_custom_color': False, 'width': 140.0,
        'width_hidden': 42.0},
    {   'bl_idname': 'NodeGroupInput',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-409.23773193359375, -53.39921569824219)),
        'mute': False, 'name': 'Group Input', 'parent': None,
        'select': False, 'show_options': True, 'show_preview': False,
        'show_texture': False,
        'use_custom_color': False, 'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-93.57553100585938, 77.80909729003906)),
        'mute': False, 'name': 'Math.001', 'operation': 'LESS_THAN',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': True, 'use_custom_color': False, 'width': 140.0,
        'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-92.14443969726562, -77.80908966064453)),
        'mute': False, 'name': 'Math', 'operation': 'GREATER_THAN',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': True, 'use_custom_color': False, 'width': 140.0,
        'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeGroup',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-93.00176239013672, -250.6979522705078)),
        'mute': False, 'name': 'Group', 'node_tree': 'GE',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_custom_color': False, 'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeGroup',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-87.43850708007812, 230.4398651123047)),
        'mute': False, 'name': 'Group.001',
        'node_tree': 'LE',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_custom_color': False, 'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'NodeGroupOutput',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((293.5755310058594, -0.0)),
        'mute': False, 'name': 'Group Output', 'parent': None,
        'select': True, 'show_options': True, 'show_preview': False,
        'show_texture': False,
        'use_custom_color': False, 'width': 140.0, 'width_hidden': 42.0}]

EASE_nodes = [
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((202.29214477539062, 13.054931640625)),
        'mute': False, 'name': 'Math.003', 'operation': 'MULTIPLY',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': False, 'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'NodeGroupOutput',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((631.918701171875, -0.0)), 'mute': False,
        'name': 'Group Output', 'parent': None, 'select': False,
        'show_options': True, 'show_preview': False, 'show_texture': False,
        'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-436.1941833496094, -142.0224609375)),
        'mute': False, 'name': 'Math', 'operation': 'POWER', 'parent': None,
        'select': False, 'show_options': True, 'show_preview': False,
        'show_texture': False, 'use_clamp': False,
        'use_custom_color': False, 'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-222.1285400390625, -172.68186950683594)),
        'mute': False, 'name': 'Math.001', 'operation': 'MULTIPLY',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': False, 'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-48.417198181152344, 47.7509880065918)),
        'mute': False, 'name': 'Math.002', 'operation': 'MULTIPLY',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': False, 'use_custom_color': False, 'width': 140.0,
        'width_hidden': 42.0},
    {   'bl_idname': 'NodeGroupInput',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-661.8468017578125, -18.538509368896484)),
        'mute': False, 'name': 'Group Input', 'parent': None,
        'select': False, 'show_options': True, 'show_preview': False,
        'show_texture': False,
        'use_custom_color': False, 'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((430.49359130859375, 12.252891540527344)),
        'mute': False, 'name': 'Math.004', 'operation': 'SUBTRACT',
        'parent': None, 'select': True, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': False, 'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0}]

FAC_nodes = [
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-135.85430908203125, 97.22634887695312)),
        'mute': False, 'name': 'Math', 'operation': 'SUBTRACT',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': False, 'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((135.8543243408203, 77.88851928710938)),
        'mute': False, 'name': 'Math.002', 'operation': 'DIVIDE',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': False, 'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'NodeGroupOutput',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((335.85430908203125, -0.0)),
        'mute': False, 'name': 'Group Output', 'parent': None,
        'select': False, 'show_options': True, 'show_preview': False,
        'show_texture': False,
        'use_custom_color': False, 'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'ShaderNodeMath',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-131.55853271484375, -97.22634887695312)),
        'mute': False, 'name': 'Math.001', 'operation': 'SUBTRACT',
        'parent': None, 'select': False, 'show_options': True,
        'show_preview': False, 'show_texture': False,
        'use_clamp': False, 'use_custom_color': False,
        'width': 140.0, 'width_hidden': 42.0},
    {   'bl_idname': 'NodeGroupInput',
        'height': 100.0, 'hide': False, 'label': '',
        'location': Vector((-523.6997680664062, -51.866947174072266)),
        'mute': False, 'name': 'Group Input', 'parent': None,
        'select': True, 'show_options': True, 'show_preview': False,
        'show_texture': False,
        'use_custom_color': False, 'width': 140.0, 'width_hidden': 42.0}]

BETWEEN_links = [
    {   'from_node': 'Group Input',
        'from_order': 0,
        'from_socket': 'Fac',
        'to_node': 'Math',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 1,
        'from_socket': 'Max',
        'to_node': 'Math.001',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 2,
        'from_socket': 'Min',
        'to_node': 'Math',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Math.002',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Group Output',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 0,
        'from_socket': 'Fac',
        'to_node': 'Math.001',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 2,
        'from_socket': 'Min',
        'to_node': 'Group',
        'to_order': 1,
        'to_socket': 'Constant'},
    {   'from_node': 'Group Input',
        'from_order': 0,
        'from_socket': 'Fac',
        'to_node': 'Group',
        'to_order': 0,
        'to_socket': 'Fac'},
    {   'from_node': 'Math',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.002',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 0,
        'from_socket': 'Fac',
        'to_node': 'Group.001',
        'to_order': 0,
        'to_socket': 'Fac'},
    {   'from_node': 'Group Input',
        'from_order': 1,
        'from_socket': 'Max',
        'to_node': 'Group.001',
        'to_order': 1,
        'to_socket': 'Constant'},
    {   'from_node': 'Group.001',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.002',
        'to_order': 0,
        'to_socket': 'Value'}]

EASE_links = [
    {   'from_node': 'Group Input',
        'from_order': 0,
        'from_socket': 'Fac',
        'to_node': 'Math',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Math',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.001',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Math',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.002',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Math.002',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.003',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Math.001',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.004',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Math.003',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.004',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 0,
        'from_socket': 'Fac',
        'to_node': 'Math.002',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Math.004',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Group Output',
        'to_order': 0,
        'to_socket': 'Value'}]

FAC_links =[
    {   'from_node': 'Math',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.002',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Math.001',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.002',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 0,
        'from_socket': 'Fac',
        'to_node': 'Math',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 1,
        'from_socket': 'Max',
        'to_node': 'Math.001',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 2,
        'from_socket': 'Min',
        'to_node': 'Math',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Math.002',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Group Output',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 2,
        'from_socket': 'Min',
        'to_node': 'Math.001',
        'to_order': 1,
        'to_socket': 'Value'}]

LE_links = [
    {   'from_node': 'Reroute',
        'from_order': 0,
        'from_socket': 'Output',
        'to_node': 'Math',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Reroute',
        'from_order': 0,
        'from_socket': 'Output',
        'to_node': 'Math.001',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Math.003',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Group Output',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 0,
        'from_socket': 'Fac',
        'to_node': 'Reroute',
        'to_order': 0,
        'to_socket': 'Input'},
    {   'from_node': 'Reroute.001',
        'from_order': 0,
        'from_socket': 'Output',
        'to_node': 'Math',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Reroute.001',
        'from_order': 0,
        'from_socket': 'Output',
        'to_node': 'Math.001',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 1,
        'from_socket': 'Constant',
        'to_node': 'Reroute.001',
        'to_order': 0,
        'to_socket': 'Input'},
    {   'from_node': 'Math',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.003',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Math.001',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.002',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Math.002',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.003',
        'to_order': 1,
        'to_socket': 'Value'}]

GE_links = [
    {   'from_node': 'Reroute',
        'from_order': 0,
        'from_socket': 'Output',
        'to_node': 'Math',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Reroute',
        'from_order': 0,
        'from_socket': 'Output',
        'to_node': 'Math.001',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Math',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.002',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Math.001',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.003',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Math.002',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Math.003',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Math.003',
        'from_order': 0,
        'from_socket': 'Value',
        'to_node': 'Group Output',
        'to_order': 0,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 0,
        'from_socket': 'Fac',
        'to_node': 'Reroute',
        'to_order': 0,
        'to_socket': 'Input'},
    {   'from_node': 'Reroute.001',
        'from_order': 0,
        'from_socket': 'Output',
        'to_node': 'Math',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Reroute.001',
        'from_order': 0,
        'from_socket': 'Output',
        'to_node': 'Math.001',
        'to_order': 1,
        'to_socket': 'Value'},
    {   'from_node': 'Group Input',
        'from_order': 1,
        'from_socket': 'Constant',
        'to_node': 'Reroute.001',
        'to_order': 0,
        'to_socket': 'Input'}]

LE_defaults = {
    'Group Input': ([], [0.0, 0.0]),
    'Group Output': ([0.0], []),
    'Math': ([0.5, 0.5], [0.0]),
    'Math.001': ([0.5, 0.5], [0.0]),
    'Math.002': ([1.0, 0.5], [0.0]),
    'Math.003': ([0.5, 0.5], [0.0]),
    'Reroute': ([0.0], [0.0]),
    'Reroute.001': ([0.0], [0.0])}

GE_defaults = {
    'Group Input': ([], [0.0, 0.0]),
    'Group Output': ([0.0], []),
    'Math': ([0.5, 0.5], [0.0]),
    'Math.001': ([0.5, 0.5], [0.0]),
    'Math.002': ([1.0, 0.5], [0.0]),
    'Math.003': ([0.5, 0.5], [0.0]),
    'Reroute': ([0.0], [0.0]),
    'Reroute.001': ([0.0], [0.0])}

between_defaults = {
    'Group': ([0.5, 0.5], [0.0]),
    'Group Input': ([], [0.5, 0.5, 0.5]),
    'Group Output': ([0.0], []),
    'Group.001': ([0.5, 0.5], [0.0]),
    'Math': ([0.5, 0.5], [0.0]),
    'Math.001': ([0.5, 0.5], [0.0]),
    'Math.002': ([0.5, 0.5], [0.0])}

fac_defaults = {
    'Group Input': ([], [0.5, 0.5, 0.5]),
    'Group Output': ([0.0], []),
    'Math': ([0.5, 0.5], [0.0]),
    'Math.001': ([0.5, 0.5], [0.0]),
    'Math.002': ([0.5, 0.5], [0.0])}

ease_defaults = {
    'Group Input': ([], [0.5]),
    'Group Output': ([0.0], []),
    'Math': ([0.5, 2.0], [0.0]),
    'Math.001': ([0.5, 3.0], [0.0]),
    'Math.002': ([0.5, 0.5], [0.0]),
    'Math.003': ([0.5, 2.0], [0.0]),
    'Math.004': ([0.5, 0.5], [0.0])}

between_node = {
    'nodes': BETWEEN_nodes, 'links': BETWEEN_links,
    'prop': 'BETWEEN', 'group': 'between',
    'inputs': [('Fac', 'VALUE'), ('Max', 'VALUE'), ('Min', 'VALUE')],
    'outputs': [('Value', 'VALUE')], 'defaults': between_defaults}
ease_node = {
    'nodes': EASE_nodes, 'links': EASE_links,
    'prop': 'EASE', 'group': 'ease',
    'inputs': [('Fac', 'VALUE')],
    'outputs': [('Value', 'VALUE')], 'defaults': ease_defaults}
fac_node = {
    'nodes': FAC_nodes, 'links': FAC_links,
    'prop': 'FAC', 'group': 'fac',
    'inputs': [('Fac', 'VALUE'), ('Max', 'VALUE'), ('Min', 'VALUE')],
    'outputs': [('Value', 'VALUE')], 'defaults': fac_defaults}

ge_node = {
    'nodes': GE_nodes, 'links': GE_links,
    'prop': 'GE', 'group':'GE',
    'inputs': [('Fac', 'VALUE'), ('Constant', 'VALUE')],
    'outputs': [('Value', 'VALUE')], 'defaults': GE_defaults}
le_node = {
    'nodes': LE_nodes, 'links': LE_links,
    'prop': 'LE', 'group':'LE',
    'inputs': [('Fac', 'VALUE'), ('Constant', 'VALUE')],
    'outputs': [('Value', 'VALUE')], 'defaults': LE_defaults}

pre_requisites ={
    node_data['group']: node_data for node_data in
    (between_node, ease_node, fac_node, ge_node, le_node)}
                           
