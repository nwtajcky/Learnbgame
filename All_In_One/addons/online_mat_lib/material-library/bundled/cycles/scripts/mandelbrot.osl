#include <stdosl.h>

shader node_fractal(
    float Scale = 75.0,
    point Vector = P,
    int Iterations = 31,
    float FacMultiplier = 5.0,
    color Background = color(0.0),
    output color Color = color(0.0),
    output float Fac = 0.0)
{
    point p = Vector*Scale;
  float s = 0.0;
  float auxiliar = 0.0;
  float factor = 0.0;
        
    // Start Mandelbrot fractal    
    p[0] -= 0.5;    
    p[1] -= 0.5;    
    p[0] *= 4.0;
    p[1] *= 4.0;
    
    // ¿constant?
  s = abs(pow(sin(0. / 20.),10.)) + 0.00057;
    
  p[0] *= s;
  p[1] *= s;
    
    p[0] -= 1.1822;
    p[1] -= 0.3095;
        
    point pa = p;
    point pb = p;
    int i = 0;
    int prevIteration = Iterations;
    
    do
  {        
      pb[0] = pa[0]*pa[0] - pa[1]*pa[1];
    pb[1] = pa[0]*pa[1] + pa[1]*pa[0];
    pa = pb + p;
    i++;
    if ((prevIteration == Iterations) && ((pa[0]*pa[0]) + (pa[1]*pa[1])) > 4.0)
    {
        prevIteration = i + 1;
    }        
    } while (i < prevIteration);

  // Colorize
  //factor = float(i) – (log(log(sqrt((pa[0]*pa[0]) + (pa[1]*pa[1])))) / log(2.0));
    factor = float(i);
  auxiliar = sqrt((pa[0]*pa[0]) + (pa[1]*pa[1]));
  factor = factor - (log(log(auxiliar))/log(2.0));
  factor = factor / float(Iterations);

  Color[0] = sin(factor * Background[0]);
  Color[1] = sin(factor * Background[1]);
  Color[2] = sin(factor * Background[2]);
  
  Fac = sin(factor*FacMultiplier);
}