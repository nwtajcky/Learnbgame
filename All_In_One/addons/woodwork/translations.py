# ***** BEGIN GPL LICENSE BLOCK *****
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ***** END GPL LICENSE BLOCK *****


# ##### BEGIN AUTOGENERATED I18N SECTION #####
# NOTE: You can safely move around this auto-generated block (with the begin/end markers!),
#       and edit the translations by hand.
#       Just carefully respect the format of the tuple!

# Tuple of tuples ((msgctxt, msgid), (sources, gen_comments), (lang, translation, (is_fuzzy, comments)), ...)
translations_tuple = (
    (("*", ""),
     ((), ()),
     ("fr_FR", "Project-Id-Version: wood work 1.0 (0)\n",
               (False,
                ("Blender's translation file (po format).",
                 "Copyright (C) 2014 The Blender Foundation.",
                 "This file is distributed under the same license as the Blender package.",
                 "FIRST AUTHOR <EMAIL@ADDRESS>, YEAR."))),
    ),
    (("Operator", "Mortise"),
     (("bpy.types.MESH_OT_mortise",),
      ()),
     ("fr_FR", "Mortaise",
               (False, ())),
    ),
    (("*", "Creates a mortise given a face"),
     (("bpy.types.MESH_OT_mortise",),
      ()),
     ("fr_FR", "Créer une mortaise à partir d'une face",
               (True, ())),
    ),
    (("Operator", "Tenon"),
     (("bpy.types.MESH_OT_tenon",),
      ()),
     ("fr_FR", "Tenon",
               (False, ())),
    ),
    (("*", "Creates a tenon given a face"),
     (("bpy.types.MESH_OT_tenon",),
      ()),
     ("fr_FR", "Créer un tenon à partir d'une face",
               (False, ())),
    ),
    (("*", "Woodworking"),
     (("bpy.types.woodworking_joints_panel",),
      ()),
     ("fr_FR", "Travail du bois",
               (False, ())),
    ),
    (("*", "Woodworking joints"),
     (("bpy.types.woodworking_joints_panel",),
      ()),
     ("fr_FR", "Assemblages en bois",
               (True, ())),
    ),
    (("*", "Haunch value type"),
     (("bpy.types.MortiseHaunch.type",
       "bpy.types.TenonHaunch.type"),
      ()),
     ("fr_FR", "Type de valeur pour le renfort",
               (False, ())),
    ),
    (("*", "Give value to haunch depth"),
     (("bpy.types.MortiseHaunch.type:'value'",
       "bpy.types.TenonHaunch.type:'value'"),
      ()),
     ("fr_FR", "Renseigner la valeur pour le renfort d'épaulement",
               (False, ())),
    ),
    (("*", "Set haunch depth by percentage"),
     (("bpy.types.MortiseHaunch.type:'percentage'",
       "bpy.types.TenonHaunch.type:'percentage'"),
      ()),
     ("fr_FR", "Définir la hauteur du renfort en pourcentage",
               (True, ())),
    ),
    (("*", "Haunch angle"),
     (("bpy.types.MortiseHaunch.angle",
       "bpy.types.TenonHaunch.angle",
       "scripts/addons/woodwork/mortise.py:88",
       "scripts/addons/woodwork/tenon.py:107"),
      ()),
     ("fr_FR", "Angle du renfort",
               (False, ())),
    ),
    (("*", "Use a straight haunch"),
     (("bpy.types.MortiseHaunch.angle:'straight'",
       "bpy.types.TenonHaunch.angle:'straight'"),
      ()),
     ("fr_FR", "Utilise un renfort droit",
               (False, ())),
    ),
    (("*", "Sloped"),
     (("bpy.types.MortiseHaunch.angle:'sloped'",
       "bpy.types.TenonHaunch.angle:'sloped'"),
      ()),
     ("fr_FR", "En biseau",
               (False, ())),
    ),
    (("*", "Use a sloping haunch"),
     (("bpy.types.MortiseHaunch.angle:'sloped'",
       "bpy.types.TenonHaunch.angle:'sloped'"),
      ()),
     ("fr_FR", "Utilise un renfort taillé en biseau",
               (False, ())),
    ),
    (("*", "Haunch depth"),
     (("bpy.types.MortiseHaunch.depth_value",
       "bpy.types.MortiseHaunch.depth_value",
       "bpy.types.MortiseHaunch.depth_percentage",
       "bpy.types.TenonHaunch.depth_value",
       "bpy.types.TenonHaunch.depth_value",
       "bpy.types.TenonHaunch.depth_percentage"),
      ()),
     ("fr_FR", "Profondeur du renfort d'épaulement",
               (False, ())),
    ),
    (("*", "Haunch depth (relative to tenon depth)"),
     (("bpy.types.MortiseHaunch.depth_percentage",
       "bpy.types.TenonHaunch.depth_percentage"),
      ()),
     ("fr_FR", "Profondeur du renfort d'épaulement (relative à la profondeur du tenon)",
               (False, ())),
    ),
    (("*", "Height shoulder type"),
     (("bpy.types.MortiseHeightPropertyGroup.shoulder_type",
       "bpy.types.TenonHeightPropertyGroup.shoulder_type",
       "scripts/addons/woodwork/mortise.py:103",
       "scripts/addons/woodwork/tenon.py:122"),
      ()),
     ("fr_FR", "Type d'épaulement pour la hauteur",
               (False, ())),
    ),
    (("*", "Give value to shoulder height"),
     (("bpy.types.MortiseHeightPropertyGroup.shoulder_type:'value'",
       "bpy.types.TenonHeightPropertyGroup.shoulder_type:'value'"),
      ()),
     ("fr_FR", "Renseigner la valeur de l'épaulement pour la hauteur",
               (False, ())),
    ),
    (("*", "Set shoulder height by percentage"),
     (("bpy.types.MortiseHeightPropertyGroup.shoulder_type:'percentage'",
       "bpy.types.TenonHeightPropertyGroup.shoulder_type:'percentage'"),
      ()),
     ("fr_FR", "Donner la valeur de l'épaulement pour la hauteur en pourcentage",
               (False, ())),
    ),
    (("*", "Height type"),
     (("bpy.types.MortiseHeightPropertyGroup.type",
       "bpy.types.TenonHeightPropertyGroup.type",
       "scripts/addons/woodwork/mortise.py:93",
       "scripts/addons/woodwork/tenon.py:112"),
      ()),
     ("fr_FR", "Type de valeur pour la hauteur",
               (False, ())),
    ),
    (("*", "Max. height"),
     (("bpy.types.MortiseHeightPropertyGroup.type:'max'",
       "bpy.types.TenonHeightPropertyGroup.type:'max'"),
      ()),
     ("fr_FR", "Hauteur maximale",
               (False, ())),
    ),
    (("*", "Set height to the maximum length"),
     (("bpy.types.MortiseHeightPropertyGroup.type:'max'",
       "bpy.types.TenonHeightPropertyGroup.type:'max'"),
      ()),
     ("fr_FR", "Définir la hauteur comme étant celle de la longueur de la face",
               (False, ())),
    ),
    (("*", "Give value to height"),
     (("bpy.types.MortiseHeightPropertyGroup.type:'value'",
       "bpy.types.TenonHeightPropertyGroup.type:'value'"),
      ()),
     ("fr_FR", "Renseigner la valeur de la hauteur",
               (False, ())),
    ),
    (("*", "Set height by percentage"),
     (("bpy.types.MortiseHeightPropertyGroup.type:'percentage'",
       "bpy.types.TenonHeightPropertyGroup.type:'percentage'"),
      ()),
     ("fr_FR", "Définir la hauteur en pourcentage",
               (False, ())),
    ),
    (("*", "Haunched on first side"),
     (("bpy.types.MortiseHeightPropertyGroup.haunched_first_side",
       "bpy.types.TenonHeightPropertyGroup.haunched_first_side"),
      ()),
     ("fr_FR", "Renfort sur le premier côté",
               (False, ())),
    ),
    (("*", "Add a little stub tenon at the top of the joint"),
     (("bpy.types.MortiseHeightPropertyGroup.haunched_first_side",
       "bpy.types.TenonHeightPropertyGroup.haunched_first_side"),
      ()),
     ("fr_FR", "Ajoute un renfort au tenon",
               (False, ())),
    ),
    (("*", "Mortise height relative to length side"),
     (("bpy.types.MortiseHeightPropertyGroup.percentage",
       "bpy.types.MortiseHeightPropertyGroup.value"),
      ()),
     ("fr_FR", "Hauteur de la mortaise relative à la longueur de la face",
               (True, ())),
    ),
    (("*", "Shoulder"),
     (("bpy.types.MortiseHeightPropertyGroup.shoulder_value",
       "bpy.types.MortiseHeightPropertyGroup.shoulder_percentage",
       "bpy.types.MortiseThicknessPropertyGroup.shoulder_value",
       "bpy.types.MortiseThicknessPropertyGroup.shoulder_percentage",
       "bpy.types.TenonHeightPropertyGroup.shoulder_value",
       "bpy.types.TenonHeightPropertyGroup.shoulder_percentage",
       "bpy.types.TenonThicknessPropertyGroup.shoulder_value",
       "bpy.types.TenonThicknessPropertyGroup.shoulder_percentage"),
      ()),
     ("fr_FR", "Epaulement",
               (False, ())),
    ),
    (("*", "Mortise shoulder on length side"),
     (("bpy.types.MortiseHeightPropertyGroup.shoulder_value",),
      ()),
     ("fr_FR", "Epaulement de la mortaise sur la longueur",
               (True, ())),
    ),
    (("*", "Reverse shoulder"),
     (("bpy.types.MortiseHeightPropertyGroup.reverse_shoulder",
       "bpy.types.MortiseThicknessPropertyGroup.reverse_shoulder",
       "bpy.types.TenonHeightPropertyGroup.reverse_shoulder",
       "bpy.types.TenonThicknessPropertyGroup.reverse_shoulder"),
      ()),
     ("fr_FR", "Renverser l'épaulement",
               (False, ())),
    ),
    (("*", "Specify shoulder for the other side"),
     (("bpy.types.MortiseHeightPropertyGroup.reverse_shoulder",
       "bpy.types.MortiseThicknessPropertyGroup.reverse_shoulder",
       "bpy.types.TenonHeightPropertyGroup.reverse_shoulder",
       "bpy.types.TenonThicknessPropertyGroup.reverse_shoulder"),
      ()),
     ("fr_FR", "Indique que l'épaulement se situe de l'autre côté",
               (False, ())),
    ),
    (("*", "Haunched on second side"),
     (("bpy.types.MortiseHeightPropertyGroup.haunched_second_side",
       "bpy.types.TenonHeightPropertyGroup.haunched_second_side"),
      ()),
     ("fr_FR", "Renfort sur le second côté",
               (False, ())),
    ),
    (("*", "Add a little stub tenon at the bottom of the joint"),
     (("bpy.types.MortiseHeightPropertyGroup.haunched_second_side",
       "bpy.types.TenonHeightPropertyGroup.haunched_second_side"),
      ()),
     ("fr_FR", "Ajoute un renfort au tenon",
               (True, ())),
    ),
    (("*", "Centered"),
     (("bpy.types.MortiseHeightPropertyGroup.centered",
       "bpy.types.MortiseThicknessPropertyGroup.centered",
       "bpy.types.TenonHeightPropertyGroup.centered",
       "bpy.types.TenonThicknessPropertyGroup.centered"),
      ()),
     ("fr_FR", "Centré",
               (False, ())),
    ),
    (("*", "Specify if mortise is centered on length side"),
     (("bpy.types.MortiseHeightPropertyGroup.centered",),
      ()),
     ("fr_FR", "Indique si la mortaise est centrée en longueur",
               (True, ())),
    ),
    (("*", "Mortise shoulder (relative to length side)"),
     (("bpy.types.MortiseHeightPropertyGroup.shoulder_percentage",),
      ()),
     ("fr_FR", "Epaulement de la mortaise (valeur relative à la longueur)",
               (True, ())),
    ),
    (("*", "Mortise depth"),
     (("bpy.types.MortisePropertyGroup.depth_value",),
      ()),
     ("fr_FR", "Profondeur de la mortaise",
               (False, ())),
    ),
    (("*", "Thickness shoulder type"),
     (("bpy.types.MortiseThicknessPropertyGroup.shoulder_type",
       "bpy.types.TenonThicknessPropertyGroup.shoulder_type",
       "scripts/addons/woodwork/mortise.py:65",
       "scripts/addons/woodwork/tenon.py:84"),
      ()),
     ("fr_FR", "Type de valeur pour l'épaisseur de l'épaulement",
               (False, ())),
    ),
    (("*", "Give value to shoulder thickness"),
     (("bpy.types.MortiseThicknessPropertyGroup.shoulder_type:'value'",
       "bpy.types.TenonThicknessPropertyGroup.shoulder_type:'value'"),
      ()),
     ("fr_FR", "Renseigner la valeur de l'épaulement pour l'épaisseur",
               (False, ())),
    ),
    (("*", "Set thickness shoulder by percentage"),
     (("bpy.types.MortiseThicknessPropertyGroup.shoulder_type:'percentage'",
       "bpy.types.TenonThicknessPropertyGroup.shoulder_type:'percentage'"),
      ()),
     ("fr_FR", "Définir l'épaulement pour l'épaisseur en pourcentage",
               (False, ())),
    ),
    (("*", "Thickness type"),
     (("bpy.types.MortiseThicknessPropertyGroup.type",
       "bpy.types.TenonThicknessPropertyGroup.type",
       "scripts/addons/woodwork/mortise.py:55",
       "scripts/addons/woodwork/tenon.py:74"),
      ()),
     ("fr_FR", "Type de valeur pour l'épaisseur",
               (False, ())),
    ),
    (("*", "Max. thickness"),
     (("bpy.types.MortiseThicknessPropertyGroup.type:'max'",
       "bpy.types.TenonThicknessPropertyGroup.type:'max'"),
      ()),
     ("fr_FR", "Epaisseur maximale",
               (False, ())),
    ),
    (("*", "Set thickness to the maximum width"),
     (("bpy.types.MortiseThicknessPropertyGroup.type:'max'",
       "bpy.types.TenonThicknessPropertyGroup.type:'max'"),
      ()),
     ("fr_FR", "Définir l'épaisseur du tenon comme étant celle de la largeur de la face",
               (False, ())),
    ),
    (("*", "Give value to thickness"),
     (("bpy.types.MortiseThicknessPropertyGroup.type:'value'",
       "bpy.types.TenonThicknessPropertyGroup.type:'value'"),
      ()),
     ("fr_FR", "Renseigner la valeur de l'épaisseur",
               (False, ())),
    ),
    (("*", "Set thickness by percentage"),
     (("bpy.types.MortiseThicknessPropertyGroup.type:'percentage'",
       "bpy.types.TenonThicknessPropertyGroup.type:'percentage'"),
      ()),
     ("fr_FR", "Définir l'épaisseur en pourcentage",
               (False, ())),
    ),
    (("*", "Mortise thickness (relative to width side)"),
     (("bpy.types.MortiseThicknessPropertyGroup.percentage",
       "bpy.types.MortiseThicknessPropertyGroup.value"),
      ()),
     ("fr_FR", "Epaisseur du tenon relative à la largeur de la face",
               (True, ())),
    ),
    (("*", "Mortise shoulder on width side"),
     (("bpy.types.MortiseThicknessPropertyGroup.shoulder_value",),
      ()),
     ("fr_FR", "Valeur de l'épaulement sur le côté de la largeur",
               (True, ())),
    ),
    (("*", "Mortise shoulder (relative to width side)"),
     (("bpy.types.MortiseThicknessPropertyGroup.shoulder_percentage",),
      ()),
     ("fr_FR", "Epaulement du tenon relatif à la largeur de la face",
               (True, ())),
    ),
    (("*", "Specify if mortise is centered on width side"),
     (("bpy.types.MortiseThicknessPropertyGroup.centered",),
      ()),
     ("fr_FR", "Indique que la mortaise est centrée sur la largeur de la face",
               (True, ())),
    ),
    (("*", "Tenon height relative to length side"),
     (("bpy.types.TenonHeightPropertyGroup.percentage",
       "bpy.types.TenonHeightPropertyGroup.value"),
      ()),
     ("fr_FR", "Hauteur du tenon relative à la longueur de la face",
               (False, ())),
    ),
    (("*", "Tenon shoulder on length side"),
     (("bpy.types.TenonHeightPropertyGroup.shoulder_value",),
      ()),
     ("fr_FR", "Epaulement du tenon sur la longueur",
               (False, ())),
    ),
    (("*", "Specify if tenon is centered on length side"),
     (("bpy.types.TenonHeightPropertyGroup.centered",),
      ()),
     ("fr_FR", "Indique si le tenon est centré en longueur",
               (False, ())),
    ),
    (("*", "Tenon shoulder (relative to length side)"),
     (("bpy.types.TenonHeightPropertyGroup.shoulder_percentage",),
      ()),
     ("fr_FR", "Epaulement du tenon (valeur relative à la longueur)",
               (False, ())),
    ),
    (("*", "Tenon depth"),
     (("bpy.types.TenonPropertyGroup.depth_value",),
      ()),
     ("fr_FR", "Profondeur du tenon",
               (False, ())),
    ),
    (("*", "Tenon thickness (relative to width side)"),
     (("bpy.types.TenonThicknessPropertyGroup.percentage",
       "bpy.types.TenonThicknessPropertyGroup.value"),
      ()),
     ("fr_FR", "Epaisseur du tenon relative à la largeur de la face",
               (False, ())),
    ),
    (("*", "Tenon shoulder on width side"),
     (("bpy.types.TenonThicknessPropertyGroup.shoulder_value",),
      ()),
     ("fr_FR", "Valeur de l'épaulement sur le côté de la largeur",
               (False, ())),
    ),
    (("*", "Tenon shoulder (relative to width side)"),
     (("bpy.types.TenonThicknessPropertyGroup.shoulder_percentage",),
      ()),
     ("fr_FR", "Epaulement du tenon relatif à la largeur de la face",
               (False, ())),
    ),
    (("*", "Specify if tenon is centered on width side"),
     (("bpy.types.TenonThicknessPropertyGroup.centered",),
      ()),
     ("fr_FR", "Indique que le tenon est centré sur la largeur de la face",
               (False, ())),
    ),
    (("*", "Position"),
     (("scripts/addons/woodwork/mortise.py:62",
       "scripts/addons/woodwork/mortise.py:100",
       "scripts/addons/woodwork/tenon.py:81",
       "scripts/addons/woodwork/tenon.py:119"),
      ()),
     ("fr_FR", "Position",
               (False, ())),
    ),
    (("*", "Haunch depth type"),
     (("scripts/addons/woodwork/mortise.py:78",
       "scripts/addons/woodwork/tenon.py:97"),
      ()),
     ("fr_FR", "Type de valeur pour le renfort",
               (False, ())),
    ),
    (("*", "Depth"),
     (("scripts/addons/woodwork/mortise.py:159",
       "scripts/addons/woodwork/tenon.py:176"),
      ()),
     ("fr_FR", "Profondeur",
               (False, ())),
    ),
    (("*", "You must select a face for the mortise."),
     (("scripts/addons/woodwork/mortise.py:33",),
      ()),
     ("fr_FR", "Vous devez sélectionner une face pour créer le tenon.",
               (True, ())),
    ),
    (("*", "Selected face is not quad."),
     (("scripts/addons/woodwork/mortise.py:39",
       "scripts/addons/woodwork/tenon.py:58"),
      ()),
     ("fr_FR", "La face sélectionnée n'est pas un quadrangle.",
               (False, ())),
    ),
    (("*", "Selected face is not planar."),
     (("scripts/addons/woodwork/mortise.py:44",
       "scripts/addons/woodwork/tenon.py:63"),
      ()),
     ("fr_FR", "La face sélectionnée doit est plane.",
               (False, ())),
    ),
    (("*", "Selected face is not rectangular."),
     (("scripts/addons/woodwork/mortise.py:49",
       "scripts/addons/woodwork/tenon.py:68"),
      ()),
     ("fr_FR", "La face sélectionnée doit être rectangulaire.",
               (False, ())),
    ),
    (("*", "Width side"),
     (("scripts/addons/woodwork/mortise.py:137",
       "scripts/addons/woodwork/mortise.py:141",
       "scripts/addons/woodwork/tenon.py:156",
       "scripts/addons/woodwork/tenon.py:160"),
      ()),
     ("fr_FR", "Côté de la largeur",
               (False, ())),
    ),
    (("*", "Length side"),
     (("scripts/addons/woodwork/mortise.py:150",
       "scripts/addons/woodwork/mortise.py:154",
       "scripts/addons/woodwork/tenon.py:168",
       "scripts/addons/woodwork/tenon.py:172"),
      ()),
     ("fr_FR", "Côté de la longueur",
               (False, ())),
    ),
    (("*", "Size of length size shoulder and mortise height are too long."),
     (("scripts/addons/woodwork/mortise.py:361",),
      ()),
     ("fr_FR", "La dimension de l'épaulement côté longueur et la hauteur du tenon sont trop longs.",
               (True, ())),
    ),
    (("*", "Size of width size shoulder and mortise thickness are too long."),
     (("scripts/addons/woodwork/mortise.py:371",),
      ()),
     ("fr_FR", "La dimension de d'épaulement côté largeur et l'épaisseur du tenon sont trop longs.",
               (True, ())),
    ),
    (("*", "You must select a face for the tenon."),
     (("scripts/addons/woodwork/tenon.py:52",),
      ()),
     ("fr_FR", "Vous devez sélectionner une face pour créer le tenon.",
               (False, ())),
    ),
    (("*", "Size of length size shoulder and tenon height are too long."),
     (("scripts/addons/woodwork/tenon.py:329",),
      ()),
     ("fr_FR", "La dimension de l'épaulement côté longueur et la hauteur du tenon sont trop longs.",
               (False, ())),
    ),
    (("*", "Size of width size shoulder and tenon thickness are too long."),
     (("scripts/addons/woodwork/tenon.py:339",),
      ()),
     ("fr_FR", "La dimension de d'épaulement côté largeur et l'épaisseur du tenon sont trop longs.",
               (False, ())),
    ),
)

translations_dict = {}
for msg in translations_tuple:
    key = msg[0]
    for lang, trans, (is_fuzzy, comments) in msg[2:]:
        if trans and not is_fuzzy:
            translations_dict.setdefault(lang, {})[key] = trans

# ##### END AUTOGENERATED I18N SECTION #####

import bpy

def register(module_name):
    bpy.app.translations.register(module_name, translations_dict)

def unregister(module_name):
    bpy.app.translations.unregister(module_name)
