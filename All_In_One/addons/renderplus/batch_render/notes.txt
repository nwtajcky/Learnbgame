THE BATCH PROCESS
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

1.  The RP_OT_ProcessBatch operator generates the data file and state file, and
    sets internal variables to hold errors and mark that a batch is in process.
2.  The same operator calls a new Blender instance running in the background.
    That instance runs this python script giving the data file as an argument.
3.  The operator then starts watch_state_file() in a thread to watch the state
    file for changes (this function runs on a timer).
4.  The batch_dispatch script goes over the jobs list in the data file, and
    run them sequentially. Everytime a job is completed or has failed, it
    updates the state file and RSS (if enabled).
5.  Blender watches (and reads) the state file to keep the UI updated.
6.  When this script has run all jobs, it quits.
7.  When all jobs in the state file are either finished or failed, a variable
    is set to mark that batch is no longer running.
8.  After that, generated files are deleted and contents of the error file
    are collected.

If one or more jobs failed, the errors are cross-referenced to the jobs list to
get the job number (in the get_batch_errors() ) and displayed.

If the batch is cancelled the currently running render job is killed, and then
the batch_dispatch instance. A notification pops up in the info bar.

Generated files are saved in the "batch_tmp" folder, inside the addons'
directory. They use the blend's filename as a base. All these files are
cleaned up when completing or cancelling the batch.

Relevant files:
- batch_dispatch.py
- batch.py
- ui.py
- feed.py
- data.py


GENERATED FILES:
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

[blendfile.blend]_data.json
-------------------------------------------------------------------------------
Contains all the data about the batch and it's render jobs. It's generated by
the process_batch operator.

Check the write_datafile function in the RP_processBatch operator to see what
goes into the datafile.


[blendfile.blend]_state.json
--------------------------------------------------------------------------------
Contains information about the state of each render job. The file holds a python
list with a integer for each render job. These integers represent values from
the State enum in the State module.

This file is generated by the process_batch operator and it's updated everytime
a job is finished or has failed. The functionality to handle the state file is
encapsulated in the StateManager class.

The file is watched and read in a separate thread in Blender to keep the UI
updated.


[blendfile.blend].py
--------------------------------------------------------------------------------
Contains python code to run on the blend file. This includes some overrides that
can't be done from the command line, as well as custom overrides.


[blendfile.blend].pid
--------------------------------------------------------------------------------
Contains the PID for the currently running render job so it can be killed when
the batch is cancelled.


[blendfile.blend].error
--------------------------------------------------------------------------------
Contains any errors produced by the render jobs, one per line as they happen.
If there are no errors this file will be empty.
