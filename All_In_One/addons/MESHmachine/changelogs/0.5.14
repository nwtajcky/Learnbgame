June 27 2018

* Plug
	- polystein like detail insertion tool
	- does not use boolean, inetead replaces faces directly
	- unlike polystein, it does not require any special face selection either
	- cleanup and organize
	- expose props, as redo seems to work now
	- add limited dissolve as a cleanup step, beofre doing tris-to-quads
	- create deformation plane and add surface deform mod
		- allows existing chamfers/bevels to perfectly be alligned to surface
		- this also corrects any misalginments of the plug due to low res curvatur of the target surface
	- this plane method and face fill function will be used as a fall back method
	- the prefered method will be using custom grid/deformation planes per plug:
		- these, instead of the border verts of the plug, will be used to find the faces on the target to replace
		- they will also used for the surfac deform
		- they shold make the current face fill obsolete
		- and so insertions shold become less topology intrusive
	- switch to custom per plug deformation plane system
	- the deformation plane is called the handle and is also the parent object of the plug
	- the plug is the mesh that is embedded
	- the plug and the handle can have children, which will be recognized as subsets
	- remove end in edit mode prop
	- properly error check initial selection
		- this could likey be made redundant with proper plug scene insertion (via DM style asset loaders)
	- create stash when non are present and normal_transfer is True
	- unparent subsets and plug from handle
	- separately do plug vertex projection and handle based target face finding
	- add handle subdivision based on precision prop
	- move add_vgroup() and unparent() to utils.support

	- add draw()
	- fix issue with dissolve_limited() dissolving beyond the seection border
		- turns out it needs to be run in FACE mode!
	- ensure only the bridged faces and nothing else is selected before running cleanup()
	- hide various debug output if debug is False
	- control offset loop reach for the plug and the handle
	- initialize precision, dissolve_angle and offset_amnt in MESHmachine menu
	- add rotation prop, useful to finetune placement/mesh integration
	- contain prop, used to limit the face replacement
		- it's a bit slow, but necessary on big flat polys and long ones such as on cylinders or bevels
	- add more vertex groups to simplify selections
	- use bmesh to create them(assign the verts) and select verts from vgroups
	- check for presense of conform vgroup at the beginning
	- benchmark
	- fix missing faces issue when contain is True
	- fix tiny triangle at border issue when contain is True
	- fix issue in merge where sometimes edges would be in the border and boundary group when contain is True
	- inrease the polygon selection for normal transfer when contain is True
	- re-format draw()
	- create normal_transfer vgroups
		- do it even if normal transfer prop is False
	- add deform prop, to choose whether the plug obj is deformed
		- diabling will only work properly with plugs, that don't have a hard edge (no bevel/fuse)
		- if disabled a normal transfer will also not be done, as it would only smooth across the hard edge, which is undesired
	- add deform_subsets prop, which may be desired in some cases
	- update testing scene
		- add sharp edge plugs
	- do normal transfer without bpy.ops
	- do stash creation without bpy.ops
	- for EDGE mode, clear the normals so theres no smoothing across the hard edge caused by the data trasnfer mod
	- add filletoredge enum prop
		- FILLET always aplies modifier based deformation and does not do vertex proximity offsets
		- EDGE optionally optionally oes modifier based deformation and always does vertex proximity offsets
		- this differentiation now also allows tiny bevels to be properly deforemed, when before the vertex proximity offsets would damage them
	- parent and unparent without bpy.ops
	- modal, fading wire drawing of the edges relevant to the integration - the same as in the normal transver vgroup verts
	- its drawn in a similar fashion as symmetrize, as the plug op is not a modal
	- add fading_wire prop in draw()
	- add support for Hooks
	- fix redo issue in apply_hooks_and_arrays()(previously apply_hooks()) caused by lack of scene.update()
	- add support for mesh_deform, through an additional deformer mesh
		- it turns out the surface deform mod has some limitations, like underhangs
		- the mod will either not bind or in some cases the bind is messy and produces offshooting verts
		- the mesh deformer mod seems to handle these cases fine, but setting a plug with a deformer up requires additional effort
		- if a deformer is found a mesh deform of the plug is done, by tying the deformer mesh with a surface deform to the shrinkwrapped handle
	- add hidden deform_interpolation_falloff prop, beldner sets this value to 4, but it was insufficient for the 2 dimensional array plug
		- increasing it to 16 seems to fix the issue and does not seem to affect other plugs negatively
	- always add a stash if no stash is present, not just when normal transfer is checked
	- allow plugging on plugs (before they are plugged)
	- automatically set FILLET or EDGE on first run based on object.MM.hasfillet prop
	- solve the vertex group issue in 2 dimensional array plugs, by first applying the array mods on the caps of the second plug array mod
* DrawPlug
	- fix issue in DrawPlug which would weirdly cause props in Plug to jump when dragged in a redo panel
		- to add to the weird, the fix was to track time handlers like the draw handlers, and remove them before creating new ones
		- unfortunately this sometimes leads to the drawing not fading out and sticking around for a while
		- pluggin again, toggling ao or xray or going into edit mode and out again seems to remove it
		- this should be done properly at some point, just not sure how right now
* Plug Libraries
	* add Plugs assets folder
	* create Examples and MyPlugs libraries
		- Examples is force-locked, won't be available for plug creation
		- MyPlugs is the startnig library for new user plugs, it contains only 2 blender plugs
* CreatePlug
	- creates plug from selected object or objects
		- the active will be the plug mesh, any others will be subsets
	- creates plug handle and enters EDIT mode to finish of the handle
		- the handle mesh should be relatively evenly subdividable
		- triangles are fine, n-gons not (as they dont subdivide)
	- sets isplug and isplughandle object props
	- offsets outer edges slightly
	- sets xray and wire rendendering
	- add uuid object prop
		- may be useful in future
	- add isplugsubset prop
	- make handle invisible to render
	- this way it doesnt need to be done for icon rendering
	- fix issue where the handle location is not properly updated due to the hooks
	- automatically set the object.MM.hasfillet prop on the plug object
* add AddPlugToLibrary
	- allows plug library selection and optionally setting plug name
	- figures out new plug index and builds blend and icon path
	- save currentblend to be loaded again at the end
	- render icon by appending the scene from plug_icon_render.blend
	- delete everything but the plug objs and save the plug blend
	- add indicator HUD support and props to toggle them in draw()
	- fix issue where the handle location is not properly updated due to the hooks
	- automatically focus viewport on handle in case you open the plug blend manually
* SetPlugProps
	- manually checks and sets plug props of selected object
	- poll whether 1 object is selected
* DebugPlugProps
	- check the active objec for plug props
	- checks the actives children as well
	- so, ideally, you'd select the handle and run the tool, as the handle is the most parent object of a plug
* ClearPlugProps
        - useful for array plug creation when the caps of the array are created from plug meshes, that already have their props
	- add alsoclearvgroups prop, it defaults to True

* Fuse
	- save force_projected_loop prop

* Chamfer
	- optionally create normal transfer vertex groups
* Offset
	- optionally create normal transfer vertex group

* CreateStash
	- separate out create_stash() from operator class

* NormalTransfer
	- hide various debug outpuf debug is False
	- separate out normal_transfer() and add_normal_transfer_mod() from operater class

* NormalClear
	- separate out normal_clear() from operator class

* Real Mirror
	- converts mirror mods into real independent objects
	- does proper mirrored origin, orientation and custom normals
	- add poll checking for active mirror mods
	- fix 180 degree rotation issue
	- allow empty targets(mirroring across itself)
	- support multiple axes
	- support multiple mirror mods
	- add optional uv offset on the mirrored objects
	- optionally create group for the mirrored objects
	- optionally apply data transfer mods for the mirrored objects
	- fix issue if obj received custom normals from applying data transfer
		- in this case the loop/normal data needs to be received from the mirror object, not from the original

* VSelect
	- it's like select linked for vertex groups
	- select vert/edge/polygon
	- run VSelect and the enite vertex group the selections belongs to will be selected
		- if there are multiple, you can scroll through them
	- if nothing is selected you can scroll through all of the vertex groups of the object
	- unlike select similar set to VGROUP, this works on all selection types, and supports mulitple vgroups per selection
	- keep it all in edit mode bmesh instead of mode switching
	- make it modal
	- drawHUD and drawVIEW3D
	- individual group toggle
	- all group toggle/invert
	- instead of returning the vgroups common to all selected elements, return all vgroups in the selection
	- this allows for easily selecting multiple specific groups by using on vert/edge/poly per group, coupled with the A modal toggle

* DrawSymmetrize
	- get the vert ids by importing from symmetrize.py instead of passing them in as an str argumment

* utils.registration.py
	- registers, unregisters and reloads plug libraries
	- change insert function template in utils.registration to support plug removal via modal dialog operator RemovePlug()
	- add bpy.types.Scene.newpllugidx prop
		- automatically set bpy.context.scene.newplugidx when bpy.context.scene.pluglibs is changed

* utils.append.py
	- has methods for group, world and scene appending (turned out only scene was needed for plug icon rendering)

* utils.devloper.Benchmark
	- prints time for each Benchmark.meassure()
	- prints total time via Benchmark.total()
	- compares time to previous tool run execution
	- add do_benchmark toggle

* utils.support.add_vgroup()
	- create vgroup and make it active using bpy.ops, if no vertex id list is passed in

* utils.support.py
	- add .parent() and unparent()

* properties.py
	- introduce isstash, isplug and isplughandle props
	- add isplugdeformer object property

* preferences
	- add showplugcount prop
	- add plugfadingwire prop
		- be default this is off and so the fading wire option will not be available
		- this is because a weird crash to desktop bug appeared
			- it happens if you plug the only object in a scene and change the wire/fading fire options
			- if you comment out the fading wire code, the issue vanishes, so it is related to this
			- the weird part is, if you add a stash or a second object to the scene, verything is fine
	- add pluglibsCOL and pluglibsIDX
	- create Plugs tab
	- add plugsinlibraryscale, showpluglabels and plugxraypreview prefs
	- add plurgremovemode prop to menu 
	- add showplugbutton and showplugbuttonname props to prefs

* init.py
  * add PlugLibsCollection() and PLugLibsUIList() to init.py

* UI  
	- add check() to all ops that have a draw function
	      - this ensures redrawing when props change
	- add Plug tool
	- add Plug Libraries
	- add plurgremovemode prop to menu 
	- create Plug Utils submenu
		- add Create Plug, Set Plug Props, Clear Plug Props and Debug Plug Props

