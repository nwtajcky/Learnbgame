encoder = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-:+=^!/*?&<>()[]{}@%$#"


class EssWriter:

    def Initialize(self, filename, encoding):
        self.file = open(filename, "w")
        self.file.write('# ESS generated by esswriter\n\n')
        self.file.write('link "liber_shader"\n')
        self.mBinartyEncoding = encoding
    def Close(self):
        self.file.close()

    def BeginNode(self, type, name):
        self.file.write('node "' + type + '" "' + name + '"\n')

    def EndNode(self):
        self.file.write('end\n')

    def AddInt(self, name, value):
        self.file.write('\tint "' + name + '" ' + str(value)+'\n')

    def AddScaler(self, name, value):
        self.file.write('\tscalar "' + name + '" ' + str(value)+'\n')

    def AddEnum(self, name, value):
        self.file.write('\tenum "' + name + '" "' + str(value)+'"\n')

    def AddBool(self, name, value):
        if value:
            self.file.write('\tbool "' + name + '" on\n')
        else:
            self.file.write('\tbool "' + name + '" off\n')

    def AddColor(self, name, color):
        self.file.write('\tcolor "' + name + '" ' + str(color[0]) + ' ' + str(color[1]) + ' ' + str(color[2]) + '\n')

    def AddRenderCommand(self, inst_group_name, cam_name, option_name):
        self.file.write('render "' + inst_group_name + '" "' + cam_name + '" "' + option_name + '"')

    def AddRef(self, name, ref):
        self.file.write('\tref "' + name + '" "' + ref + '"\n')

    def LinkParam(self, input, shader, output):
        self.file.write('\tparam_link "' + input + '" "' + shader + '" "' + output + '"\n')

    def AddRefGroup(self, grouptype, refelements):
        self.file.write('\tref[] "' + grouptype + '" 1\n')
        for str in refelements:
            self.file.write('\t\t"' + str + '"\n')

    def AddMatrix(self, name, matrix):
        self.file.write('\tmatrix "' + name + '" ')
        self.file.write(' ' + str(matrix[0][0]) + ' ' + str(matrix[1][0]) + ' ' + str(matrix[2][0]) + ' ' + str(matrix[3][0]))
        self.file.write(' ' + str(matrix[0][1]) + ' ' + str(matrix[1][1]) + ' ' + str(matrix[2][1]) + ' ' + str(matrix[3][1]))
        self.file.write(' ' + str(matrix[0][2]) + ' ' + str(matrix[1][2]) + ' ' + str(matrix[2][2]) + ' ' + str(matrix[3][2]))
        self.file.write(' ' + str(matrix[0][3]) + ' ' + str(matrix[1][3]) + ' ' + str(matrix[2][3]) + ' ' + str(matrix[3][3]))
        self.file.write('\n')

    def AddPointList(self, name, points):
        self.file.write('\tpoint[] "' + name + '" 1\n')
        for p in points:
            v = p.co
            self.file.write('\t\t' + str(v.x) + ' ' + str(v.y) + ' ' + str(v.z) + '\n')

    def AddIndexList(self, name, faces):
        self.file.write('\tindex[] "' + name + '" 1\n')
        for face in faces:
            self.file.write('\t\t')
            if len(face.vertices) == 3:
                self.file.write(str(face.vertices[0]) + ' ' + str(face.vertices[1]) + ' ' + str(face.vertices[2]))
            elif len(face.vertices) == 4:
                self.file.write(str(face.vertices[0]) + ' ' + str(face.vertices[1]) + ' ' + str(face.vertices[2]) + ' ')
                self.file.write(str(face.vertices[2]) + ' ' + str(face.vertices[3]) + ' ' + str(face.vertices[0]))
            self.file.write('\n')
        pass