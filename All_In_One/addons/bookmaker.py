#+
# Blender add-on to generate a random row or stack of books.
#
# Copyright 2019 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed (except meshes) under CC-BY-SA
# <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import math
from random import \
    Random
import colorsys
import bpy
import bpy.utils.previews
from mathutils import \
    Matrix, \
    Vector

bl_info = \
    {
        "name" : "Bookmaker",
        "author" : "Lawrence D'Oliveiro <ldo@geek-central.gen.nz>",
        "version" : (1, 4, 0),
        "blender" : (2, 7, 9),
        "location" : "Add > Mesh",
        "description" :
            "generates a row or stack of book objects with randomly-distributed parameters.",
        "warning" : "",
        "wiki_url" : "",
        "tracker_url" : "",
        "category": "Learnbgame",
    }

#+
# Useful stuff
#-

deg = math.pi / 180

class Failure(Exception) :

    def __init__(self, msg) :
        self.msg = msg
    #end __init__

#end Failure

#+
# Book meshes and materials
# These are licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>.
#-

book_meshes = \
    {
        "hardcover" :
            {
                "vertices" :
                    [
                        (0.06460488, 0.129904, 0.1982849),
                        (0.06526268, 0, 0.198523),
                        (0, 0, 0.198523),
                        (-0.000395142, 0.1299042, 0.1982849),
                        (0.06460488, 0.129904, 0.201535),
                        (0.009671181, -0.001442945, 0.198523),
                        (-0.000395142, 0.1299042, 0.201535),
                        (0.06460488, 0.133154, 0.201535),
                        (-0.000395142, 0.133154, 0.201535),
                        (-0.0004412518, 0.006495208, 2.624452e-05),
                        (0.0005205204, 0.004330136, 1.749635e-05),
                        (0, 0.002165068, 8.748175e-06),
                        (0.06460488, 0.133154, 0.1982849),
                        (-0.000395142, 0.133154, 0.1982849),
                        (0.06526268, 0.002165068, 8.748175e-06),
                        (0.06439215, 0.004330136, 1.748861e-05),
                        (0.06463331, 0.006495208, 2.623678e-05),
                        (0.06135488, 0.129904, 0.201535),
                        (0.06135482, 0.005415067, 0.201535),
                        (0.06135488, 0.133154, 0.201535),
                        (-6.585539e-05, 0.002165068, 0.003086619),
                        (0.0005205204, 0.004330136, 0.00312629),
                        (0.06135488, 0.133154, 0.1982849),
                        (0.06526268, 0.002165068, 0.003086619),
                        (0.002854846, 0.005415067, 0.201535),
                        (0.002854858, 0.1299042, 0.201535),
                        (0.002854858, 0.133154, 0.201535),
                        (0.06439215, 0.004330132, 0.00312629),
                        (0.06493378, 0.006495208, 0.003165964),
                        (0.002854858, 0.133154, 0.1982849),
                        (-0.0001975701, 0.006495208, 0.003165964),
                        (0.04345435, -0.005715966, 0.003046945),
                        (0.03289026, -0.006876484, 0.003046945),
                        (0.02084944, -0.005181804, 0.003046945),
                        (0.05393749, -0.002041858, 0.198523),
                        (0.04345435, -0.005715966, 0.198523),
                        (0.03289026, -0.006876484, 0.198523),
                        (0.02084944, -0.005181804, 0.198523),
                        (0.05393749, -0.002041858, 0.003046945),
                        (0.002854858, 0.133154, 0.003284983),
                        (0.002854858, 0.133154, 3.498496e-05),
                        (0.002854858, 0.1299042, 3.498496e-05),
                        (-0.0001975701, 0.006495208, 0.1984041),
                        (0.002854846, 0.005415067, 3.498496e-05),
                        (0.06493378, 0.006495208, 0.1984041),
                        (0.06135488, 0.133154, 0.003284983),
                        (0.06135488, 0.133154, 3.498496e-05),
                        (0.06439215, 0.004330132, 0.1984437),
                        (0.06526268, 0.002165068, 0.1984832),
                        (0.06135482, 0.005415067, 3.498496e-05),
                        (0.06135488, 0.129904, 3.498496e-05),
                        (0.0005205204, 0.004330136, 0.1984437),
                        (-6.585539e-05, 0.002165068, 0.1984832),
                        (0.06463331, 0.006495208, 0.2015438),
                        (0.06439215, 0.004330136, 0.2015524),
                        (0.06526268, 0.002165068, 0.2015612),
                        (0, 0.002165068, 0.2015612),
                        (0.0005205204, 0.004330136, 0.2015524),
                        (-0.0004412518, 0.006495208, 0.2015438),
                        (0.009671181, -0.001442945, 0.20157),
                        (0.02084944, -0.005181804, 0.20157),
                        (0.03289026, -0.006876484, 0.20157),
                        (0.06526268, 0, 0.20157),
                        (0.04345435, -0.005715966, 0.20157),
                        (0.05393749, -0.002041858, 0.20157),
                        (0, 0, 0.20157),
                        (0.009671181, 0.001807056, 0.20157),
                        (0.02084944, -0.001931805, 0.20157),
                        (0.03289026, -0.003626484, 0.20157),
                        (0.04345435, -0.002465971, 0.20157),
                        (0.05393749, 0.001208143, 0.20157),
                        (-0.000395142, 0.133154, 0.003284983),
                        (0.06460488, 0.133154, 0.003284983),
                        (-0.000395142, 0.133154, 3.498496e-05),
                        (0.06460488, 0.133154, 3.498496e-05),
                        (-0.000395142, 0.1299042, 3.498496e-05),
                        (0.009671181, -0.001442945, 0.003046945),
                        (0.06460488, 0.129904, 3.498496e-05),
                        (-0.000395142, 0.1299042, 0.003284983),
                        (0, 0, 0.003046945),
                        (0.06526268, 0, 0.003046945),
                        (0.06460488, 0.129904, 0.003284983),
                        (0.009671181, 0.001807056, 0.1984634),
                        (0.02084944, -0.001931805, 0.1984634),
                        (0.03289026, -0.003626484, 0.1984634),
                        (0.04345435, -0.002465971, 0.1984634),
                        (0.05393749, 0.001208143, 0.1984634),
                        (0.06165636, 0.0042588, 0.201349),
                        (0.003217638, 0.0042588, 0.201349),
                        (0.06135488, 0.129904, 0.1984634),
                        (0.06135482, 0.005415067, 0.1984634),
                        (0.002854846, 0.005415067, 0.1984634),
                        (0.002854858, 0.1299042, 0.1984634),
                        (0.06165636, 0.0042588, 0.1984634),
                        (0.003217638, 0.0042588, 0.1984634),
                        (0.002869524, 0.00198606, 0.2015655),
                        (0.06156611, 0.001686607, 0.2015655),
                        (0.002869524, 0.00198606, 0.1984634),
                        (0.06156611, 0.001686607, 0.1984634),
                        (0.05160481, 0.00417291, 0.1984634),
                        (0.04185486, 0.001240239, 0.1984634),
                        (0.03210485, 0.001240239, 0.1984634),
                        (0.02235484, 0.001240239, 0.1984634),
                        (0.01260485, 0.00417291, 0.1984634),
                        (0.009671181, -0.001442945, 0),
                        (0.02084944, -0.005181804, 0),
                        (0.03289026, -0.006876484, 0),
                        (0.06526268, 0, 0),
                        (0.04345435, -0.005715966, 0),
                        (0.05393749, -0.002041858, 0),
                        (0, 0, 0),
                        (0.009671181, 0.001807056, 0),
                        (0.02084944, -0.001931805, 0),
                        (0.03289026, -0.003626484, 0),
                        (0.04345435, -0.002465971, 0),
                        (0.05393749, 0.001208143, 0),
                        (0.009671181, 0.001807056, 0.003106453),
                        (0.02084944, -0.001931805, 0.003106453),
                        (0.03289026, -0.003626484, 0.003106453),
                        (0.04345435, -0.002465971, 0.003106453),
                        (0.05393749, 0.001208143, 0.003106453),
                        (0.06165636, 0.0042588, 0.0002210443),
                        (0.003217638, 0.0042588, 0.0002210522),
                        (0.06135488, 0.129904, 0.003106453),
                        (0.06135482, 0.005415067, 0.003106453),
                        (0.002854846, 0.005415067, 0.003106453),
                        (0.002854858, 0.1299042, 0.003106453),
                        (0.06165636, 0.0042588, 0.003106453),
                        (0.003217638, 0.0042588, 0.003106453),
                        (0.002869524, 0.00198606, 4.377958e-06),
                        (0.06156611, 0.001686607, 4.377958e-06),
                        (0.002869524, 0.00198606, 0.003106453),
                        (0.06156611, 0.001686607, 0.003106453),
                        (0.05160481, 0.00417291, 0.003106453),
                        (0.04185486, 0.001240239, 0.003106453),
                        (0.03210485, 0.001240239, 0.003106453),
                        (0.02235484, 0.001240239, 0.003106453),
                        (0.01260485, 0.00417291, 0.003106453),
                    ],

                "bounds" :
                    (
                        (-0.0004412518, 0.06526268),
                        (-0.006876484, 0.133154),
                        (0, 0.20157),
                    ),

                "faces" :
                    [
                        [59, 60, 67, 66],
                        [92, 91, 103, 102, 101, 100, 99, 90, 89],
                        [42, 58, 6, 3],
                        [51, 57, 58, 42],
                        [112, 117, 118, 113],
                        [4, 0, 12, 7],
                        [114, 119, 120, 115],
                        [74, 46, 45, 72],
                        [104, 111, 112, 105],
                        [111, 116, 117, 112],
                        [105, 112, 113, 106],
                        [3, 6, 8, 13],
                        [104, 110, 11, 129, 111],
                        [7, 12, 22, 19],
                        [14, 23, 80, 107],
                        [106, 113, 114, 108],
                        [104, 76, 79, 110],
                        [4, 7, 19, 17],
                        [13, 8, 26, 29],
                        [108, 114, 115, 109],
                        [8, 6, 25, 26],
                        [20, 11, 110, 79],
                        [37, 60, 59, 5],
                        [38, 31, 108, 109],
                        [14, 15, 27, 23],
                        [28, 16, 77, 81],
                        [52, 56, 57, 51],
                        [44, 0, 4, 53],
                        [54, 47, 44, 53],
                        [55, 48, 47, 54],
                        [36, 61, 60, 37],
                        [33, 37, 5, 76],
                        [34, 64, 63, 35],
                        [35, 63, 61, 36],
                        [34, 1, 62, 64],
                        [61, 63, 69, 68],
                        [59, 65, 2, 5],
                        [55, 62, 1, 48],
                        [52, 2, 65, 56],
                        [15, 16, 28, 27],
                        [113, 118, 119, 114],
                        [126, 123, 124, 133, 134, 135, 136, 137, 125],
                        [30, 21, 51, 42],
                        [41, 43, 9, 75],
                        [109, 115, 130, 14, 107],
                        [77, 74, 72, 81],
                        [77, 50, 46, 74],
                        [73, 40, 41, 75],
                        [10, 9, 43, 122],
                        [32, 33, 105, 106],
                        [31, 32, 106, 108],
                        [79, 76, 5, 2],
                        [30, 78, 75, 9],
                        [20, 79, 2, 52],
                        [21, 20, 52, 51],
                        [1, 80, 23, 48],
                        [23, 27, 47, 48],
                        [27, 28, 44, 47],
                        [63, 64, 70, 69],
                        [60, 61, 68, 67],
                        [33, 76, 104, 105],
                        [59, 66, 95, 56, 65],
                        [64, 62, 55, 96, 70],
                        [78, 71, 73, 75],
                        [71, 39, 40, 73],
                        [21, 30, 9, 10],
                        [50, 77, 16, 49],
                        [38, 109, 107, 80],
                        [20, 21, 10, 11],
                        [25, 6, 58, 24],
                        [17, 18, 53, 4],
                        [67, 68, 84, 83],
                        [68, 69, 85, 84],
                        [66, 67, 83, 82],
                        [69, 70, 86, 85],
                        [57, 88, 24, 58],
                        [87, 54, 53, 18],
                        [25, 24, 91, 92],
                        [56, 95, 88, 57],
                        [55, 54, 87, 96],
                        [97, 95, 66, 82],
                        [98, 86, 70, 96],
                        [94, 88, 95, 97],
                        [88, 94, 91, 24],
                        [103, 91, 94, 97, 82],
                        [85, 86, 99, 100],
                        [84, 85, 100, 101],
                        [83, 84, 101, 102],
                        [82, 83, 102, 103],
                        [22, 89, 17, 19],
                        [26, 25, 92, 29],
                        [121, 49, 16, 15],
                        [41, 126, 125, 43],
                        [49, 124, 123, 50],
                        [11, 10, 122, 129],
                        [14, 130, 121, 15],
                        [131, 116, 111, 129],
                        [132, 130, 115, 120],
                        [49, 121, 127, 124],
                        [128, 131, 129, 122],
                        [122, 43, 125, 128],
                        [137, 116, 131, 128, 125],
                        [120, 133, 124, 127, 132],
                        [119, 134, 133, 120],
                        [118, 135, 134, 119],
                        [117, 136, 135, 118],
                        [116, 137, 136, 117],
                        [45, 46, 50, 123],
                        [40, 39, 126, 41],
                        [92, 89, 123, 126],
                        [3, 78, 30, 42],
                        [3, 13, 71, 78],
                        [13, 29, 39, 71],
                        [92, 126, 39, 29],
                        [22, 12, 72, 45],
                        [12, 0, 81, 72],
                        [127, 121, 130, 132],
                        [93, 98, 96, 87],
                        [87, 18, 90, 93],
                        [98, 93, 90, 99, 86],
                        [89, 22, 45, 123],
                        [18, 17, 89, 90],
                        [44, 28, 81, 0],
                        [32, 36, 37, 33],
                        [35, 36, 32, 31],
                        [34, 35, 31, 38],
                        [1, 34, 38, 80],
                    ],

                "left_vertices" :
                    {
                        2,
                        3,
                        6,
                        8,
                        9,
                        10,
                        11,
                        13,
                        20,
                        21,
                        24,
                        25,
                        26,
                        29,
                        30,
                        39,
                        40,
                        41,
                        42,
                        43,
                        51,
                        52,
                        56,
                        57,
                        58,
                        65,
                        71,
                        73,
                        75,
                        78,
                        79,
                        88,
                        91,
                        92,
                        94,
                        95,
                        97,
                        110,
                        122,
                        125,
                        126,
                        128,
                        129,
                        131,
                    },
                "right_vertices" :
                    {
                        0,
                        1,
                        4,
                        7,
                        12,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        22,
                        23,
                        27,
                        28,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        53,
                        54,
                        55,
                        62,
                        72,
                        74,
                        77,
                        80,
                        81,
                        87,
                        89,
                        90,
                        93,
                        96,
                        98,
                        121,
                        123,
                        124,
                        127,
                        130,
                        132,
                    },
                'front_vertices' :
                    {
                        1,
                        2,
                        5,
                        9,
                        10,
                        11,
                        14,
                        15,
                        16,
                        18,
                        20,
                        21,
                        23,
                        24,
                        27,
                        28,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        42,
                        43,
                        44,
                        47,
                        48,
                        49,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        76,
                        79,
                        80,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        90,
                        91,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        124,
                        125,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                    },
                "back_vertices" :
                    {
                        0,
                        3,
                        4,
                        6,
                        7,
                        8,
                        12,
                        13,
                        17,
                        19,
                        22,
                        25,
                        26,
                        29,
                        39,
                        40,
                        41,
                        45,
                        46,
                        50,
                        71,
                        72,
                        73,
                        74,
                        75,
                        77,
                        78,
                        81,
                        89,
                        92,
                        123,
                        126,
                    },
                "top_vertices" :
                    {
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        12,
                        13,
                        17,
                        18,
                        19,
                        22,
                        24,
                        25,
                        26,
                        29,
                        34,
                        35,
                        36,
                        37,
                        42,
                        44,
                        47,
                        48,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                    },
                'bottom_vertices' :
                    {
                        9,
                        10,
                        11,
                        14,
                        15,
                        16,
                        20,
                        21,
                        23,
                        27,
                        28,
                        30,
                        31,
                        32,
                        33,
                        38,
                        39,
                        40,
                        41,
                        43,
                        45,
                        46,
                        49,
                        50,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                    },

                "face_materials" :
                    {
                        1 :
                            {
                                0,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80,
                                81,
                                82,
                                83,
                                89,
                                90,
                                91,
                                92,
                                93,
                                94,
                                95,
                                96,
                                97,
                                98,
                                99,
                                100,
                                107,
                                108,
                                110,
                                111,
                                112,
                                113,
                                114,
                                115,
                                116,
                                117,
                                118,
                                120,
                                121,
                                122,
                                123,
                                124,
                                125,
                                126,
                            },
                        0 :
                            {
                                1,
                                41,
                                84,
                                85,
                                86,
                                87,
                                88,
                                101,
                                102,
                                103,
                                104,
                                105,
                                106,
                                109,
                                119,
                            },
                    },
            }, # hardcover

        "softcover" :
            {
                "vertices" :
                    [
                        (-0.03333333, -0.6978451, -0.1),
                        (-0.03333333, -0.6978451, 0.1),
                        (0.03333333, -0.6978451, -0.1),
                        (0.03333333, -0.6978451, 0.1),
                        (-0.03333333, -0.8298666, -0.1),
                        (-0.03333333, -0.8298666, 0.1),
                        (0.03333333, -0.8298666, -0.1),
                        (0.03333333, -0.8298666, 0.1),
                        (0.03248472, -0.6978451, -0.1),
                        (-0.03248472, -0.6978451, -0.1),
                        (-0.03248472, -0.6978451, 0.1),
                        (0.03248472, -0.6978451, 0.1),
                        (-0.03248472, -0.8311784, -0.1),
                        (0.03248472, -0.8311784, -0.1),
                        (0.03248472, -0.8311784, 0.1),
                        (-0.03248472, -0.8311784, 0.1),
                        (-0.03248472, -0.8302855, 0.1),
                        (0.03248472, -0.8302855, 0.1),
                        (0.03248472, -0.8302855, -0.1),
                        (-0.03248472, -0.8302855, -0.1),
                        (-0.03276896, -0.8311784, -0.1),
                        (-0.03333333, -0.8300497, -0.1),
                        (-0.03316803, -0.8308479, -0.1),
                        (-0.03333333, -0.8300497, 0.1),
                        (-0.03276896, -0.8311784, 0.1),
                        (-0.03316803, -0.8308479, 0.1),
                        (0.03333333, -0.8300497, -0.1),
                        (0.03276896, -0.8311784, -0.1),
                        (0.03316803, -0.8308479, -0.1),
                        (0.03276896, -0.8311784, 0.1),
                        (0.03333333, -0.8300497, 0.1),
                        (0.03316803, -0.8308479, 0.1),
                        (0.01995924, -0.6978451, -0.1),
                        (0.009979622, -0.6978451, -0.1),
                        (1.612289e-09, -0.6978451, -0.1),
                        (-0.00997962, -0.6978451, -0.1),
                        (-0.01995924, -0.6978451, -0.1),
                        (-0.01995924, -0.6978451, 0.1),
                        (-0.00997962, -0.6978451, 0.1),
                        (3.599111e-09, -0.6978451, 0.1),
                        (0.009979636, -0.6978451, 0.1),
                        (0.01995924, -0.6978451, 0.1),
                        (-0.01995924, -0.8305047, -0.1),
                        (-0.00997962, -0.8301553, -0.1),
                        (3.599111e-09, -0.8300629, -0.1),
                        (0.009979636, -0.8301553, -0.1),
                        (0.01995924, -0.8305047, -0.1),
                        (0.01995924, -0.8305047, 0.1),
                        (0.009979622, -0.8301553, 0.1),
                        (1.612289e-09, -0.8300629, 0.1),
                        (-0.00997962, -0.8301553, 0.1),
                        (-0.01995924, -0.8305047, 0.1),
                        (-0.01995924, -0.8296118, 0.1),
                        (-0.00997962, -0.8292624, 0.1),
                        (2.861866e-09, -0.82917, 0.1),
                        (0.009979631, -0.8292624, 0.1),
                        (0.01995924, -0.8296118, 0.1),
                        (0.01995924, -0.8296118, -0.1),
                        (0.009979627, -0.8292624, -0.1),
                        (2.349534e-09, -0.82917, -0.1),
                        (-0.00997962, -0.8292624, -0.1),
                        (-0.01995924, -0.8296118, -0.1),
                    ],

                "bounds" :
                    (
                        (-0.03333333, 0.03333333),
                        (-0.8311784, -0.6978451),
                        (-0.1, 0.1),
                    ),

                "faces" :
                    [
                        [4, 5, 1, 0],
                        [8, 11, 3, 2],
                        [7, 17, 14, 29, 31, 30],
                        [16, 5, 23, 25, 24, 15],
                        [6, 7, 30, 26],
                        [27, 29, 14, 13],
                        [10, 1, 5, 16],
                        [8, 2, 6, 18],
                        [2, 3, 7, 6],
                        [12, 15, 24, 20],
                        [0, 9, 19, 4],
                        [32, 8, 18, 57],
                        [3, 11, 17, 7],
                        [37, 10, 16, 52],
                        [52, 16, 15, 51],
                        [21, 23, 5, 4],
                        [57, 18, 13, 46],
                        [18, 6, 26, 28, 27, 13],
                        [42, 51, 15, 12],
                        [0, 1, 10, 9],
                        [32, 41, 11, 8],
                        [20, 24, 25, 22],
                        [22, 25, 23, 21],
                        [29, 27, 28, 31],
                        [31, 28, 26, 30],
                        [4, 19, 12, 20, 22, 21],
                        [9, 10, 37, 36],
                        [36, 37, 38, 35],
                        [35, 38, 39, 34],
                        [34, 39, 40, 33],
                        [33, 40, 41, 32],
                        [13, 14, 47, 46],
                        [46, 47, 48, 45],
                        [45, 48, 49, 44],
                        [44, 49, 50, 43],
                        [43, 50, 51, 42],
                        [19, 61, 42, 12],
                        [61, 60, 43, 42],
                        [60, 59, 44, 43],
                        [59, 58, 45, 44],
                        [58, 57, 46, 45],
                        [17, 56, 47, 14],
                        [56, 55, 48, 47],
                        [55, 54, 49, 48],
                        [54, 53, 50, 49],
                        [53, 52, 51, 50],
                        [11, 41, 56, 17],
                        [41, 40, 55, 56],
                        [40, 39, 54, 55],
                        [39, 38, 53, 54],
                        [38, 37, 52, 53],
                        [9, 36, 61, 19],
                        [36, 35, 60, 61],
                        [35, 34, 59, 60],
                        [34, 33, 58, 59],
                        [33, 32, 57, 58],
                    ],

                'back_vertices' :
                    {
                        0,
                        1,
                        2,
                        3,
                        8,
                        9,
                        10,
                        11,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                    },
                'bottom_vertices' :
                    {
                        0,
                        2,
                        4,
                        6,
                        8,
                        9,
                        12,
                        13,
                        18,
                        19,
                        20,
                        21,
                        22,
                        26,
                        27,
                        28,
                        32,
                        33,
                        34,
                        35,
                        36,
                        42,
                        43,
                        44,
                        45,
                        46,
                        57,
                        58,
                        59,
                        60,
                        61,
                    },
                'front_vertices' :
                    {
                        4,
                        5,
                        6,
                        7,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                    },
                'left_vertices' :
                    {
                        0,
                        1,
                        4,
                        5,
                        9,
                        10,
                        12,
                        15,
                        16,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                    },
                'right_vertices' :
                    {
                        2,
                        3,
                        6,
                        7,
                        8,
                        11,
                        13,
                        14,
                        17,
                        18,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                    },
                'top_vertices' :
                    {
                        1,
                        3,
                        5,
                        7,
                        10,
                        11,
                        14,
                        15,
                        16,
                        17,
                        23,
                        24,
                        25,
                        29,
                        30,
                        31,
                        37,
                        38,
                        39,
                        40,
                        41,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                    },

                "face_materials" :
                    {
                        0 :
                            {
                                1,
                                11,
                                13,
                                19,
                                20,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                            },
                        1 :
                            {
                                0,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                12,
                                14,
                                15,
                                16,
                                17,
                                18,
                                21,
                                22,
                                23,
                                24,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                            },
                    },
            }, # softcover

        "magazine" :
            {
                "vertices" :
                    [
                        (-0.03333333, -0.6978451, -0.1),
                        (-0.03333333, -0.6978451, 0.1),
                        (0.03333333, -0.6978451, -0.1),
                        (0.03333333, -0.6978451, 0.1),
                        (-0.03333333, -0.8211168, -0.1),
                        (-0.03333333, -0.8211168, 0.1),
                        (0.03333333, -0.8211168, -0.1),
                        (0.03333333, -0.8211168, 0.1),
                        (0.03248472, -0.6978451, -0.1),
                        (-0.03248472, -0.6978451, -0.1),
                        (-0.03248472, -0.6978451, 0.1),
                        (0.03248472, -0.6978451, 0.1),
                        (-0.03248472, -0.8224286, -0.1),
                        (0.03248472, -0.8224286, -0.1),
                        (0.03248472, -0.8224286, 0.1),
                        (-0.03248472, -0.8224286, 0.1),
                        (-0.03248472, -0.8215357, 0.1),
                        (0.03248472, -0.8215357, 0.1),
                        (0.03248472, -0.8215357, -0.1),
                        (-0.03248472, -0.8215357, -0.1),
                        (-0.03276896, -0.8224286, -0.1),
                        (-0.03333333, -0.8212999, -0.1),
                        (-0.03316803, -0.822098, -0.1),
                        (-0.03333333, -0.8212999, 0.1),
                        (-0.03276896, -0.8224286, 0.1),
                        (-0.03316803, -0.822098, 0.1),
                        (0.03333333, -0.8212999, -0.1),
                        (0.03276896, -0.8224286, -0.1),
                        (0.03316803, -0.822098, -0.1),
                        (0.03276896, -0.8224286, 0.1),
                        (0.03333333, -0.8212999, 0.1),
                        (0.03316803, -0.822098, 0.1),
                        (0.02779153, -0.6978451, -0.1),
                        (0.01389577, -0.6978451, -0.1),
                        (1.051124e-09, -0.6978451, -0.1),
                        (-0.01389576, -0.6978451, -0.1),
                        (-0.02779153, -0.6978451, -0.1),
                        (-0.02779153, -0.6978451, 0.1),
                        (-0.01389576, -0.6978451, 0.1),
                        (3.817603e-09, -0.6978451, 0.1),
                        (0.01389579, -0.6978451, 0.1),
                        (0.02779153, -0.6978451, 0.1),
                        (-0.02779153, -0.8300433, -0.1),
                        (-0.01389576, -0.8335814, -0.1),
                        (3.817603e-09, -0.8348355, -0.1),
                        (0.01389579, -0.8335814, -0.1),
                        (0.02779153, -0.8300433, -0.1),
                        (0.02779153, -0.8300433, 0.1),
                        (0.01389577, -0.8335814, 0.1),
                        (1.051124e-09, -0.8348355, 0.1),
                        (-0.01389576, -0.8335814, 0.1),
                        (-0.02779153, -0.8300433, 0.1),
                        (-0.02779153, -0.8288416, 0.1),
                        (-0.01389576, -0.8326875, 0.1),
                        (2.791053e-09, -0.8339427, 0.1),
                        (0.01389578, -0.8326875, 0.1),
                        (0.02779153, -0.8288416, 0.1),
                        (0.02779153, -0.8288416, -0.1),
                        (0.01389577, -0.8326875, -0.1),
                        (2.077675e-09, -0.8339427, -0.1),
                        (-0.01389576, -0.8326875, -0.1),
                        (-0.02779153, -0.8288416, -0.1),
                    ],

                "bounds" :
                    (
                        (-0.03333333, 0.03333333),
                        (-0.8348355, -0.6978451),
                        (-0.1, 0.1),
                    ),

                "faces" :
                    [
                        [4, 5, 1, 0],
                        [8, 11, 3, 2],
                        [7, 17, 14, 29, 31, 30],
                        [16, 5, 23, 25, 24, 15],
                        [6, 7, 30, 26],
                        [27, 29, 14, 13],
                        [10, 1, 5, 16],
                        [8, 2, 6, 18],
                        [2, 3, 7, 6],
                        [12, 15, 24, 20],
                        [0, 9, 19, 4],
                        [32, 8, 18, 57],
                        [3, 11, 17, 7],
                        [37, 10, 16, 52],
                        [52, 16, 15, 51],
                        [21, 23, 5, 4],
                        [57, 18, 13, 46],
                        [18, 6, 26, 28, 27, 13],
                        [42, 51, 15, 12],
                        [0, 1, 10, 9],
                        [32, 41, 11, 8],
                        [20, 24, 25, 22],
                        [22, 25, 23, 21],
                        [29, 27, 28, 31],
                        [31, 28, 26, 30],
                        [4, 19, 12, 20, 22, 21],
                        [9, 10, 37, 36],
                        [36, 37, 38, 35],
                        [35, 38, 39, 34],
                        [34, 39, 40, 33],
                        [33, 40, 41, 32],
                        [13, 14, 47, 46],
                        [46, 47, 48, 45],
                        [45, 48, 49, 44],
                        [44, 49, 50, 43],
                        [43, 50, 51, 42],
                        [19, 61, 42, 12],
                        [61, 60, 43, 42],
                        [60, 59, 44, 43],
                        [59, 58, 45, 44],
                        [58, 57, 46, 45],
                        [17, 56, 47, 14],
                        [56, 55, 48, 47],
                        [55, 54, 49, 48],
                        [54, 53, 50, 49],
                        [53, 52, 51, 50],
                        [11, 41, 56, 17],
                        [41, 40, 55, 56],
                        [40, 39, 54, 55],
                        [39, 38, 53, 54],
                        [38, 37, 52, 53],
                        [9, 36, 61, 19],
                        [36, 35, 60, 61],
                        [35, 34, 59, 60],
                        [34, 33, 58, 59],
                        [33, 32, 57, 58],
                    ],

                'back_vertices' :
                    {
                        0,
                        1,
                        2,
                        3,
                        8,
                        9,
                        10,
                        11,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                    },
                'bottom_vertices' :
                    {
                        0,
                        2,
                        4,
                        6,
                        8,
                        9,
                        12,
                        13,
                        18,
                        19,
                        20,
                        21,
                        22,
                        26,
                        27,
                        28,
                        32,
                        33,
                        34,
                        35,
                        36,
                        42,
                        43,
                        44,
                        45,
                        46,
                        57,
                        58,
                        59,
                        60,
                        61,
                    },
                'front_vertices' :
                    {
                        4,
                        5,
                        6,
                        7,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                    },
                'left_vertices' :
                    {
                        0,
                        1,
                        4,
                        5,
                        9,
                        10,
                        12,
                        15,
                        16,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                    },
                'right_vertices' :
                    {
                        2,
                        3,
                        6,
                        7,
                        8,
                        11,
                        13,
                        14,
                        17,
                        18,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                    },
                'top_vertices' :
                    {
                        1,
                        3,
                        5,
                        7,
                        10,
                        11,
                        14,
                        15,
                        16,
                        17,
                        23,
                        24,
                        25,
                        29,
                        30,
                        31,
                        37,
                        38,
                        39,
                        40,
                        41,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                    },

                "face_materials" :
                    {
                        0 :
                            {
                                1,
                                11,
                                13,
                                19,
                                20,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                            },
                        1 :
                            {
                                0,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                12,
                                14,
                                15,
                                16,
                                17,
                                18,
                                21,
                                22,
                                23,
                                24,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                            },
                    },
            }, # magazine
    } # book_meshes

def define_book_materials(context, nr_colours, use_materials_from_active) :

    cover_common = None

    def deselect_all(material_tree) :
        for node in material_tree.nodes :
            node.select = False
        #end for
    #end deselect_all

    def define_cover_common() :
        # create a very basic common node group to use in all the different
        # cover materials. That way, user can replace the guts of the node
        # group and have it apply to all cover materials.
        nonlocal cover_common
        gloss = 0.25
        cover_common = bpy.data.node_groups.new("BooksCoverCommon", "ShaderNodeTree")
        material_tree = cover_common
        material_input = material_tree.nodes.new("NodeGroupInput")
        material_input.location = (-200, 0)
        material_input.outputs.new("Colour", "RGBA")
        material_output = material_tree.nodes.new("NodeGroupOutput")
        material_output.location = (400, 0)
        material_output.inputs.new("Shader", "SHADER")
        colour_shader = material_tree.nodes.new("ShaderNodeBsdfDiffuse")
        colour_shader.location = (0, 0)
        gloss_shader = material_tree.nodes.new("ShaderNodeBsdfGlossy")
        gloss_shader.location = (0, -150)
        mix_shader = material_tree.nodes.new("ShaderNodeMixShader")
        mix_shader.location = (200, 0)
        material_tree.links.new(material_input.outputs[0], colour_shader.inputs[0])
        material_tree.links.new(colour_shader.outputs[0], mix_shader.inputs[1])
        material_tree.links.new(gloss_shader.outputs[0], mix_shader.inputs[2])
        mix_shader.inputs[0].default_value = gloss
        material_tree.links.new(mix_shader.outputs[0], material_output.inputs[0])
        material_tree.inputs.new("RGBA", "Colour")
        material_tree.outputs.new("SHADER", "Shader")
        deselect_all(material_tree)
    #end define_cover_common

    def define_material_common(name, hsv_colour, use_node_group) :
        material = bpy.data.materials.new(name)
        rgb_colour = colorsys.hsv_to_rgb(*hsv_colour)
        material.diffuse_color = rgb_colour
        material.use_nodes = True
        material_tree = material.node_tree
        for node in material_tree.nodes :
          # clear out default nodes
            material_tree.nodes.remove(node)
        #end for
        colour_node = material_tree.nodes.new("ShaderNodeRGB")
        colour_node.location = (-200, 0)
        colour_node.outputs[0].default_value = rgb_colour + (1,)
        if use_node_group != None :
            colour_shader = material_tree.nodes.new("ShaderNodeGroup")
            colour_shader.node_tree = use_node_group
        else :
            colour_shader = material_tree.nodes.new("ShaderNodeBsdfDiffuse")
        #end if
        colour_shader.location = (0, 0)
        material_output = material_tree.nodes.new("ShaderNodeOutputMaterial")
        material_output.location = (200, 0)
        material_tree.links.new(colour_node.outputs[0], colour_shader.inputs[0])
        material_tree.links.new(colour_shader.outputs[0], material_output.inputs[0])
        deselect_all(material_tree)
        return \
            material
    #end define_material_common

    def define_diffuse_material(name, hsv_colour) :
        return \
            define_material_common(name, hsv_colour, None)
    #end define_diffuse_material

    def define_cover_material(name, hsv_colour) :
        return \
            define_material_common(name, hsv_colour, cover_common)
    #end define_cover_material

#begin define_book_materials
    if use_materials_from_active :
        active_obj = context.scene.objects.active
        if active_obj == None or active_obj.material_slots == None or len(active_obj.material_slots) < 2 :
            use_materials_from_active = False
            raise Failure("active object must have at least 2 materials attached")
        #end if
        material_slots = active_obj.material_slots
        materials = \
            {
                "books_paper" : material_slots[0].material,
                "books_cover" : list(m.material for m in material_slots[1:]),
            }
    else :
        materials = \
            {
                "books_paper" : define_diffuse_material("books_paper", (0, 0, 0.906)),
            }
        base_cover_colour = (0.96, 0.68, 0.5)
        book_cover = []
        materials["books_cover"] = book_cover
        define_cover_common()
        for i in range(nr_colours) :
            hue = (base_cover_colour[0] + i / nr_colours) % 1.0
            book_cover.append \
              (
                define_cover_material("books_cover.%03d" % i, (hue,) + base_cover_colour[1:])
              )
        #end for
    #end if
    return \
        materials
#end define_book_materials

#+
# Icons
#-

ICON_RENDER_DEFAULT_HEIGHT = 32 # from source/blender/blenkernel/BKE_icons.h

icon_pixels = \
    {
        "row" :
          (
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x280a0614, -0x58d7e4ad, -0x42d2e1a2, -0x40d1e0a1, -0x3ed1e0a0, -0x4cd4e2a7, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x1a06040d, 0x2a0a0715, 0x20080510, 0x1605040b, 0x6c1a1136, -0x13c5d789, -0x00727e4c, -0x0010120c, -0x00000001, -0x00000001, -0x00000001, -0x00bfd27f, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x290a0714, -0x35cfde9b, -0x00839057, -0x00626c42, -0x006a7547, -0x00859359, -0x008a985c, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00abbd72, 0x05010103, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x43d2e1a3, -0x00798551, -0x000a0b08, -0x00000001, -0x00000001, -0x00000001, -0x00363c25, -0x007c8953, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x0095a463, 0x370d091c, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x06c1d482, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x003d4329, -0x007c8853, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x007f8c55, 0x701b1238, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x00a4b56d, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00444b2e, -0x007b8852, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00697446, -0x66dae6b4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x04010102, -0x00839158, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x004b5333, -0x007b8852, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00535c38, -0x43d2e1a2, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x2b0a0715, -0x00626d42, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00535b37, -0x007b8752, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x003d4429, -0x20cadb91, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x56150e2b, -0x0042482c, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x005a633c, -0x007a8752, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00282c1b, -0x03c3d683, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x7ee0eac0, -0x00212417, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00616b41, -0x007a8752, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x0012130d, -0x00c2d681, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x53d6e3aa, -0x00040404, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00687346, -0x007a8651, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00010102, -0x00c2d681, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x27cbdc95, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x006f7b4a, -0x007a8651, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00c2d681, 0x1806040c, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x03bfd280, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x0076824f, -0x00798651, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00c2d681, 0x3b0e091d, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x00a0b06b, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x007d8a54, -0x00798551, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00bccf7d, 0x5e160f2f, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x07020104, -0x007f8c55, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00849258, -0x00798551, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00a7b96f, -0x7ee0eac0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x2f0b0818, -0x005e683f, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x008c9a5d, -0x00788550, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x0091a061, -0x5bd8e5af, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x5a160f2d, -0x003e442a, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x0093a262, -0x00788450, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x007b8852, -0x38d0df9d, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x79dfeabd, -0x001d2014, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x009aaa67, -0x00788450, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00667044, -0x16c7d98c, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x4ed5e3a8, -0x00020202, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00a1b26b, -0x00778450, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00505836, -0x00c2d681, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x23cadc92, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00a8ba70, -0x00778350, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x003a4027, -0x00c2d681, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x02bccf7e, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00afc175, -0x0077834f, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00242819, -0x00c2d681, 0x03010102, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x009dad68, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00b6c979, -0x0077834f, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x000e0f0a, -0x00c2d681, 0x21080510, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0b030206, -0x007c8953, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00bdd07d, -0x0076834f, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000101, -0x00c2d681, 0x44100b22, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x350d081a, -0x005b643d, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00c0d480, -0x0076824f, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00c2d681, 0x67191133, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60170f30, -0x003a4027, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x01c2d581, -0x0076824f, -0x00000001, -0x00010101, -0x00050604, -0x000c0d09, -0x0014160e, -0x001b1e13, -0x00232718, -0x002b301e, -0x00c1d581, -0x75dee9bb, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x1f07050f, -0x15b5c680, -0x00b5c879, -0x006f7b4a, -0x001e2215, -0x00181b11, -0x00191c12, -0x001b1d13, -0x001c1f13, -0x003a4027, -0x00bacd7b, -0x00b1c376, -0x00262a1a, -0x00080806, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x007c8953, -0x52d6e3aa, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0c030206, 0x6e1a1237, -0x28cbdc95, -0x0099a966, -0x00485031, -0x00040504, -0x00000001, -0x00000001, -0x00000001, -0x00697446, -0x00c2d681, -0x00717d4c, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00171910, -0x2fcdde99, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x03010001, 0x57150e2b, 0x752f2847, 0x3c3c3c3c, 0x37373737, 0x32323232, 0x2d2d2d2d, 0x2d1e1c23, 0x54140e2a, 0x03030303, 0x01010101, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x01000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
          ),
        "stack" :
          (
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x03010102, 0x21080510, 0x44100b22, 0x67191133, -0x75dee9bb, -0x52d6e3aa, -0x2fcdde99, 0x01000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x1806040c, 0x3b0e091d, 0x5e160f2f, -0x7ee0eac0, -0x5bd8e5af, -0x38d0df9d, -0x16c7d98c, -0x00c2d681, -0x00c2d681, -0x00c2d681, -0x00c2d681, -0x00c2d681, -0x00c2d681, -0x00c1d581, -0x007c8953, -0x00171910, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x05010103, 0x370d091c, 0x701b1238, -0x66dae6b4, -0x43d2e1a2, -0x20cadb91, -0x03c3d683, -0x00c2d681, -0x00c2d681, -0x00c2d681, -0x00c2d681, -0x00bccf7d, -0x00a7b96f, -0x0091a061, -0x007b8852, -0x00667044, -0x00505836, -0x003a4027, -0x00242819, -0x000e0f0a, -0x00000101, -0x00000001, -0x002b301e, -0x00000001, -0x00000001, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, -0x4cd4e2a7, -0x00bfd27f, -0x00abbd72, -0x0095a463, -0x007f8c55, -0x00697446, -0x00535c38, -0x003d4429, -0x00282c1b, -0x0012130d, -0x00010102, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00232718, -0x00000001, -0x00000001, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, -0x3ed1e0a0, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x001b1e13, -0x00000001, -0x00000001, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, -0x40d1e0a1, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x0014160e, -0x00000001, -0x00000001, 0x01010101, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, -0x42d2e1a2, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x000c0d09, -0x00000001, -0x00000001, 0x03030303, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, -0x58d7e4ad, -0x0010120c, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00050604, -0x00080806, -0x00717d4c, 0x54140e2a, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x280a0614, -0x00727e4c, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00010101, -0x00262a1a, -0x00c2d681, 0x2d1e1c23, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, -0x13c5d789, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00b1c376, -0x00697446, 0x2d2d2d2d, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x6c1a1136, -0x008a985c, -0x007c8953, -0x007c8853, -0x007b8852, -0x007b8852, -0x007b8752, -0x007a8752, -0x007a8752, -0x007a8651, -0x007a8651, -0x00798651, -0x00798551, -0x00798551, -0x00788550, -0x00788450, -0x00788450, -0x00778450, -0x00778350, -0x0077834f, -0x0077834f, -0x0076834f, -0x0076824f, -0x0076824f, -0x00bacd7b, -0x00000001, 0x32323232, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x1605040b, -0x00859359, -0x00363c25, -0x003d4329, -0x00444b2e, -0x004b5333, -0x00535b37, -0x005a633c, -0x00616b41, -0x00687346, -0x006f7b4a, -0x0076824f, -0x007d8a54, -0x00849258, -0x008c9a5d, -0x0093a262, -0x009aaa67, -0x00a1b26b, -0x00a8ba70, -0x00afc175, -0x00b6c979, -0x00bdd07d, -0x00c0d480, -0x01c2d581, -0x003a4027, -0x00000001, 0x37373737, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x20080510, -0x006a7547, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x001c1f13, -0x00000001, 0x3c3c3c3c, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x2a0a0715, -0x00626c42, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x001b1d13, -0x00040504, 0x752f2847, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x1a06040d, -0x00839057, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00191c12, -0x00485031, 0x57150e2b, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x35cfde9b, -0x000a0b08, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00181b11, -0x0099a966, 0x03010001, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x290a0714, -0x00798551, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x001e2215, -0x28cbdc95, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, -0x43d2e1a3, -0x06c1d482, -0x00a4b56d, -0x00839158, -0x00626d42, -0x0042482c, -0x00212417, -0x00040404, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x006f7b4a, 0x6e1a1237, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x04010102, 0x2b0a0715, 0x56150e2b, -0x7ee0eac0, -0x53d6e3aa, -0x27cbdc95, -0x03bfd280, -0x00a0b06b, -0x007f8c55, -0x005e683f, -0x003e442a, -0x001d2014, -0x00020202, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00000001, -0x00b5c879, 0x0c030206, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x07020104, 0x2f0b0818, 0x5a160f2d, -0x79dfeabd, -0x4ed5e3a8, -0x23cadc92, -0x02bccf7e, -0x009dad68, -0x007c8953, -0x005b643d, -0x003a4027, -0x15b5c680, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0b030206, 0x350d081a, 0x60170f30, 0x1f07050f, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
          ),
    }
icons = None

#+
# Mainline
#-

dimensions_min = \
    (
            max
              (
                v[0] - book_mesh["bounds"][0][0]
                for book_mesh in book_meshes.values()
                for i in range(len(book_mesh["vertices"]))
                for v in (book_mesh["vertices"][i],)
                if i in book_mesh["left_vertices"]
              )
        +
            max
              (
                book_mesh["bounds"][0][1] - v[0]
                for book_mesh in book_meshes.values()
                for i in range(len(book_mesh["vertices"]))
                for v in (book_mesh["vertices"][i],)
                if i in book_mesh["right_vertices"]
              ),
        max
          (
            v[1] - book_mesh["bounds"][1][0]
            for book_mesh in book_meshes.values()
            for i in range(len(book_mesh["vertices"]))
            for v in (book_mesh["vertices"][i],)
            if i in book_mesh["front_vertices"]
          ),
        0.001
    )
dimension_defaults = tuple(v[1] - v[0] for v in book_meshes["hardcover"]["bounds"])

def generate_book(self, geom_random, material_random, context, pos, materials, j) :
    choices = \
        (
            (self.hardcover_weight, "hardcover"),
            (self.softcover_weight, "softcover"),
            (self.magazine_weight, "magazine"),
        )
    total = sum(c[0] for c in choices)
    choose = geom_random.random() * total
    pick = -1
    subtotal = 0
    while True :
        if pick >= 0 and choose < subtotal :
            break
        pick += 1
        if pick == len(choices) :
            pick = 0 # all weights were zero, just pick hardcover
            break
        #end if
        subtotal += choices[pick][0]
    #end while
    book_mesh = book_meshes[choices[pick][1]]
    width = max(self.width * 10 ** ((2 * geom_random.random() - 1) * self.width_var / 10), dimensions_min[0])
    depth = max(self.depth * 10 ** ((2 * geom_random.random() - 1) * self.depth_var / 10), dimensions_min[1])
    height = max(self.height * 10 ** ((2 * geom_random.random() - 1) * self.height_var / 10), dimensions_min[2])
    vertices = []
    bounds = book_mesh["bounds"]
    for i in range(len(book_mesh["vertices"])) :
        coords = list(book_mesh["vertices"][i])
        coords[0] -= bounds[0][0]
        coords[1] -= bounds[1][0]
        coords[2] -= bounds[2][0]
        if i in book_mesh["right_vertices"] :
            coords[0] += width - (bounds[0][1] - bounds[0][0])
        elif i not in book_mesh["left_vertices"] :
            coords[0] *= width / (bounds[0][1] - bounds[0][0])
        #end if
        if i in book_mesh["back_vertices"] :
            coords[1] += depth - (bounds[1][1] - bounds[1][0])
        #end if
        if i in book_mesh["top_vertices"] :
            coords[2] += height - (bounds[2][1] - bounds[2][0])
        #end if
        vertices.append(coords)
    #end for
    new_mesh_name = new_obj_name = "Book.%03d" % (j + 1)
    new_mesh = bpy.data.meshes.new(new_mesh_name)
    new_mesh_name = new_mesh.name
    new_mesh.materials.append(materials["books_paper"])
    new_mesh.materials.append(material_random.choice(materials["books_cover"]))
    new_mesh.from_pydata(vertices, [], book_mesh["faces"])
    for i in range(len(book_mesh["faces"])) :
        p = new_mesh.polygons[i]
        if i in book_mesh["face_materials"][0] :
            p.material_index = 0
        else :
            p.material_index = 1
        #end if
    #end for
    new_obj = bpy.data.objects.new(new_mesh_name, new_mesh)
    new_obj_name = new_obj.name
    new_obj.matrix_basis = Matrix.Translation(pos)
    context.scene.objects.link(new_obj)
    bpy.data.objects[new_obj_name].select = True
    context.scene.objects.active = new_obj
    for this_vertex in new_mesh.vertices :
        this_vertex.select = True # usual Blender default for newly-created object
    #end for
    return \
        new_obj, width, depth, height
#end generate_book

class BookmakerRow(bpy.types.Operator) :
    bl_idname = "add_mesh.bookmaker_row"
    bl_label = "Bookmaker Row"
    bl_description = "creates a horizontal row of books"
    bl_context = "objectmode"
    bl_options = {"REGISTER", "UNDO"}

    count = bpy.props.IntProperty \
      (
        name = "count",
        description = "How many books to generate",
        min = 1,
        default = 1,
      )
    hardcover_weight = bpy.props.FloatProperty \
      (
        name = "hardcover_weight",
        description = "relative frequency of hardcover books",
        min = 0,
        max = 1,
        default = 0.5,
      )
    softcover_weight = bpy.props.FloatProperty \
      (
        name = "softcover_weight",
        description = "relative frequency of softcover books",
        min = 0,
        max = 1,
        default = 0.5,
      )
    magazine_weight = bpy.props.FloatProperty \
      (
        name = "magazine_weight",
        description = "relative frequency of magazines",
        min = 0,
        max = 1,
        default = 0.5,
      )
    nr_colours = bpy.props.IntProperty \
      (
        name = "nr_colours",
        description = "How many different cover colours to give them",
        min = 1,
        default = 1,
      )
    use_materials_from_active = bpy.props.BoolProperty \
      (
        name = "use_materials_from_active",
        description = "reuse materials from active object (need at least 2 materials)",
      )
    position = bpy.props.FloatVectorProperty \
      (
        name = "position",
        description = "where to position the books (initially at the 3D cursor)",
      )
    width = bpy.props.FloatProperty \
      (
        name = "width",
        description = "base width of one book",
        min = dimensions_min[0],
        default = dimension_defaults[0],
      )
    width_var = bpy.props.FloatProperty \
      (
        name = "width_var",
        description = "variation in width (logarithmic)",
        min = 0,
        max = 10,
        default = 0,
      )
    depth = bpy.props.FloatProperty \
      (
        name = "depth",
        description = "base depth of one book",
        min = dimensions_min[1],
        default = dimension_defaults[1],
      )
    depth_var = bpy.props.FloatProperty \
      (
        name = "depth_var",
        description = "variation in depth (logarithmic)",
        min = 0,
        max = 10,
        default = 0,
      )
    height = bpy.props.FloatProperty \
      (
        name = "height",
        description = "base height of one book",
        min = dimensions_min[2],
        default = dimension_defaults[2],
      )
    height_var = bpy.props.FloatProperty \
      (
        name = "height_var",
        description = "variation in height (logarithmic)",
        min = 0,
        max = 10,
        default = 0,
      )
    gap_var = bpy.props.FloatProperty \
      (
        name = "gap_var",
        description = "variation in gap between books (logarithmic)",
        min = 0,
        max = 10,
        default = 0,
      )
    rotate_var = bpy.props.FloatProperty \
      (
        name = "rotate_var",
        description = "variation in rotation angle",
        min = 0,
        max = 45 * deg,
        default = 0,
        subtype = "ANGLE"
      )
    rotate_clump_var = bpy.props.FloatProperty \
      (
        name = "rotate_clump",
        description = "how often to keep same rotation angle",
        min = 0,
        max = 1,
        default = 0.5,
      )
    geom_ranseed = bpy.props.IntProperty \
      (
        name = "ranseed",
        description = "Pseudorandom seed for geometry",
        min = 0,
        default = 0,
      )
    mtrl_ranseed = bpy.props.IntProperty \
      (
        name = "ranseed",
        description = "Pseudorandom seed for materials",
        min = 0,
        default = 0,
      )

    def draw(self, context) :
        the_col = self.layout.column(align = True)
        the_col.prop(self, "count", "Nr Books")
        the_col.prop(self, "hardcover_weight", "Weight for Hardcover")
        the_col.prop(self, "softcover_weight", "Weight for Softcover")
        the_col.prop(self, "magazine_weight", "Weight for Magazines")
        the_col.prop(self, "nr_colours", "Nr Colours")
        the_col.prop(self, "use_materials_from_active", "Reuse Materials")
        the_col.prop(self, "position", "Position")
        the_col.prop(self, "width", "Width")
        the_col.prop(self, "width_var", "Width Variation")
        the_col.prop(self, "depth", "Depth")
        the_col.prop(self, "depth_var", "Depth Variation")
        the_col.prop(self, "height", "Height")
        the_col.prop(self, "height_var", "Height Variation")
        the_col.prop(self, "gap_var", "Gap")
        the_col.prop(self, "rotate_var", "Rotate Variation")
        the_col.prop(self, "rotate_clump_var", "Rotation Clumping")
        the_col.prop(self, "geom_ranseed", "Random Seed for Geometry")
        the_col.prop(self, "mtrl_ranseed", "Random Seed for Materials")
    #end draw

    def action_common(self, context, redoing) :
        try :
            if context.scene.render.engine != "CYCLES" :
                raise Failure("Only Cycles renderer is supported")
            #end if
            if redoing :
                pos = Vector(tuple(self.position))
            else :
                pos = context.scene.cursor_location.copy()
                self.position = pos.copy()
            #end if
            geom_random = Random(self.geom_ranseed)
            material_random = Random(self.mtrl_ranseed)
            prev_rotation_displacement = 0
            bpy.ops.object.select_all(action = "DESELECT")
            materials = None
            prev_rotate = None
            prev_width = 0
            for j in range(self.count) :
                if materials == None :
                    materials = define_book_materials \
                      (
                        context,
                        self.nr_colours,
                        self.use_materials_from_active
                      )
                #end if
                new_obj, width, depth, height = generate_book(self, geom_random, material_random, context, pos, materials, j)
                if prev_rotate == None or geom_random.random() >= self.rotate_clump_var :
                    rotate = (2 * geom_random.random() - 1) * self.rotate_var
                    prev_rotate = rotate
                else :
                    rotate = prev_rotate
                #end if
                rotation_displacement = height * math.sin(rotate) - prev_width * (1 - math.cos(rotate))
                gap = self.width * (10 ** ((2 * geom_random.random() - 1) * self.gap_var / 10) - 1)
                x_disp_delta = rotation_displacement - prev_rotation_displacement
                z_disp_delta = max(width * math.sin(rotate), 0)
                new_obj.matrix_basis = \
                    (
                        Matrix.Translation
                          (
                            Vector(((0, - x_disp_delta)[x_disp_delta < 0], 0, z_disp_delta))
                          )
                    *
                        Matrix.Translation
                          (
                            Vector((gap, 0, 0))
                          )
                    *
                        new_obj.matrix_basis
                    *
                        Matrix.Rotation(rotate, 4, Vector((0, 1, 0)))
                    )
                pos += Vector((width + gap + (0, - x_disp_delta)[x_disp_delta < 0], 0, 0))
                prev_rotation_displacement = rotation_displacement
                prev_width = width
            #end for
            # all done
            status = {"FINISHED"}
        except Failure as why :
            sys.stderr.write("Failure: %s\n" % why.msg) # debug
            self.report({"ERROR"}, why.msg)
            status = {"CANCELLED"}
        #end try
        return \
            status
    #end action_common

    def execute(self, context) :
        return \
            self.action_common(context, True)
    #end execute

    def invoke(self, context, event) :
        return \
            self.action_common(context, False)
    #end invoke

#end BookmakerRow

class BookmakerStack(bpy.types.Operator) :
    bl_idname = "add_mesh.bookmaker_stack"
    bl_label = "Bookmaker Row"
    bl_description = "creates a vertical stack of books"
    bl_context = "objectmode"
    bl_options = {"REGISTER", "UNDO"}

    count = bpy.props.IntProperty \
      (
        name = "count",
        description = "How many books to generate",
        min = 1,
        default = 1,
      )
    hardcover_weight = bpy.props.FloatProperty \
      (
        name = "hardcover_weight",
        description = "relative frequency of hardcover books",
        min = 0,
        max = 1,
        default = 0.5,
      )
    softcover_weight = bpy.props.FloatProperty \
      (
        name = "softcover_weight",
        description = "relative frequency of softcover books",
        min = 0,
        max = 1,
        default = 0.5,
      )
    magazine_weight = bpy.props.FloatProperty \
      (
        name = "magazine_weight",
        description = "relative frequency of magazines",
        min = 0,
        max = 1,
        default = 0.5,
      )
    nr_colours = bpy.props.IntProperty \
      (
        name = "nr_colours",
        description = "How many different cover colours to give them",
        min = 1,
        default = 1,
      )
    use_materials_from_active = bpy.props.BoolProperty \
      (
        name = "use_materials_from_active",
        description = "reuse materials from active object (need at least 2 materials)",
      )
    position = bpy.props.FloatVectorProperty \
      (
        name = "position",
        description = "where to position the books (initially at the 3D cursor)",
      )
    width = bpy.props.FloatProperty \
      (
        name = "width",
        description = "base width of one book",
        min = dimensions_min[0],
        default = dimension_defaults[0],
      )
    width_var = bpy.props.FloatProperty \
      (
        name = "width_var",
        description = "variation in width (logarithmic)",
        min = 0,
        max = 10,
        default = 0,
      )
    depth = bpy.props.FloatProperty \
      (
        name = "depth",
        description = "base depth of one book",
        min = dimensions_min[1],
        default = dimension_defaults[1],
      )
    depth_var = bpy.props.FloatProperty \
      (
        name = "depth_var",
        description = "variation in depth (logarithmic)",
        min = 0,
        max = 10,
        default = 0,
      )
    height = bpy.props.FloatProperty \
      (
        name = "height",
        description = "base height of one book",
        min = dimensions_min[2],
        default = dimension_defaults[2],
      )
    height_var = bpy.props.FloatProperty \
      (
        name = "height_var",
        description = "variation in height (logarithmic)",
        min = 0,
        max = 10,
        default = 0,
      )
    rotate_var = bpy.props.FloatProperty \
      (
        name = "rotate_var",
        description = "variation in rotation angle",
        min = 0,
        max = 360 * deg,
        default = 0,
        subtype = "ANGLE"
      )
    geom_ranseed = bpy.props.IntProperty \
      (
        name = "ranseed",
        description = "Pseudorandom seed for geometry",
        min = 0,
        default = 0,
      )
    mtrl_ranseed = bpy.props.IntProperty \
      (
        name = "ranseed",
        description = "Pseudorandom seed for materials",
        min = 0,
        default = 0,
      )

    def draw(self, context) :
        the_col = self.layout.column(align = True)
        the_col.prop(self, "count", "Nr Books")
        the_col.prop(self, "hardcover_weight", "Weight for Hardcover")
        the_col.prop(self, "softcover_weight", "Weight for Softcover")
        the_col.prop(self, "magazine_weight", "Weight for Magazines")
        the_col.prop(self, "nr_colours", "Nr Colours")
        the_col.prop(self, "use_materials_from_active", "Reuse Materials")
        the_col.prop(self, "position", "Position")
        the_col.prop(self, "width", "Width")
        the_col.prop(self, "width_var", "Width Variation")
        the_col.prop(self, "depth", "Depth")
        the_col.prop(self, "depth_var", "Depth Variation")
        the_col.prop(self, "height", "Height")
        the_col.prop(self, "height_var", "Height Variation")
        the_col.prop(self, "rotate_var", "Rotate Variation")
        the_col.prop(self, "geom_ranseed", "Random Seed for Geometry")
        the_col.prop(self, "mtrl_ranseed", "Random Seed for Materials")
    #end draw

    def action_common(self, context, redoing) :
        try :
            if context.scene.render.engine != "CYCLES" :
                raise Failure("Only Cycles renderer is supported")
            #end if
            if redoing :
                pos = Vector(tuple(self.position))
            else :
                pos = context.scene.cursor_location.copy()
                self.position = pos.copy()
            #end if
            geom_random = Random(self.geom_ranseed)
            material_random = Random(self.mtrl_ranseed)
            materials = None
            prev_depth = prev_height = None
            for j in range(self.count) :
                if materials == None :
                    materials = define_book_materials \
                      (
                        context,
                        self.nr_colours,
                        self.use_materials_from_active
                      )
                #end if
                new_obj, width, depth, height = generate_book(self, geom_random, material_random, context, pos, materials, j)
                rotate = (2 * geom_random.random() - 1) * self.rotate_var
                delta_pos = [0, 0, 0]
                if prev_depth != None : # <=> prev_height != None
                    delta_pos[0] = geom_random.random() * (prev_height - height)
                    delta_pos[1] = geom_random.random() * (prev_depth - depth)
                #end if
                new_obj.matrix_basis = \
                    (
                        new_obj.matrix_basis
                    *
                        Matrix.Translation(Vector((- height / 2, depth / 2, 0)))
                    *
                        Matrix.Rotation(rotate, 4, Vector((0, 0, 1)))
                    *
                        Matrix.Translation(Vector((height / 2, - depth / 2, 0)))
                    *
                        Matrix.Translation(delta_pos)
                    *
                        Matrix.Rotation(- 90 * deg, 4, Vector((0, 1, 0)))
                    )
                prev_depth = depth
                prev_height = height
                pos += Vector((0, 0, width))
            #end for
            # all done
            status = {"FINISHED"}
        except Failure as why :
            sys.stderr.write("Failure: %s\n" % why.msg) # debug
            self.report({"ERROR"}, why.msg)
            status = {"CANCELLED"}
        #end try
        return \
            status
    #end action_common

    def execute(self, context) :
        return \
            self.action_common(context, True)
    #end execute

    def invoke(self, context, event) :
        return \
            self.action_common(context, False)
    #end invoke

#end BookmakerStack

def add_invoke_item(self, context) :
    self.layout.operator(BookmakerRow.bl_idname, text = "Books Row", icon_value = icons["row"].icon_id)
    self.layout.operator(BookmakerStack.bl_idname, text = "Books Stack", icon_value = icons["stack"].icon_id)
#end add_invoke_item

def register() :
    global icons
    if icons == None :
        icons = bpy.utils.previews.new()
        for name in ("row", "stack") :
            icon = icons.new(name)
            icon.icon_size = (ICON_RENDER_DEFAULT_HEIGHT, ICON_RENDER_DEFAULT_HEIGHT)
            icon.icon_pixels = icon_pixels[name]
        #end for
    #end if
    bpy.utils.register_module(__name__)
    bpy.types.INFO_MT_mesh_add.append(add_invoke_item)
#end register

def unregister() :
    global icons
    bpy.utils.unregister_module(__name__)
    bpy.types.INFO_MT_mesh_add.remove(add_invoke_item)
    if icons != None :
        bpy.utils.previews.remove(icons)
        icons = None
    #end if
#end unregister

if __name__ == "__main__" :
    register()
#end if
