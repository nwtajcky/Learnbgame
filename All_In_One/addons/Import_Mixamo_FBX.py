# ##### BEGIN GPL LICENSE BLOCK #####
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####


# Coded by Phillip Proctor
# Portions generated by blender's code templates
# phill_proctor@growlybearproductions.com


import bpy

bl_info = \
    {
        "name" : "Mixamo FBX Import",
        "author" : "Phillip S. Proctor <phill_proctor@yahoo.com>",
        "version" : (1, 0, 0),
        "blender" : (2, 7, 6),
        "location" : "File > Import",
        "description" :
            "Imports Mixamo Fuse FBX and corrects mesh orientation",
        "warning" : "",
        "wiki_url" : "http://growlybearproductions.com/blender",
        "tracker_url" : "",
        "category": "Learnbgame",
    }



# Import the FBX file and correct mesh
def Import_Mixamo_FBX(context, MixamoFBXFile):
    bpy.ops.object.select_all(action='DESELECT')
    bpy.ops.import_scene.fbx(filepath=MixamoFBXFile)
    DeselectArmature()
    bpy.ops.transform.rotate(value=1.5708, axis=(1,0,0))
    bpy.ops.transform.resize(value=(.01,.01,.01))
    #SelectArmature()
    return {'FINISHED'}



# Function to deselect the armature. Required so it does not get rotated with the mesh.
def DeselectArmature():
    scene = bpy.context.scene
    for ob in scene.objects:
        if ob.type == 'ARMATURE':
            ob.select = False
    return


# Function to select the armature and deselect everything else
def SelectArmature():
    scene = bpy.context.scene
    for ob in scene.objects:
        if ob.type == 'ARMATURE':
            ob.select = True
        else:
            ob.select = False
    return

# ImportHelper is a helper class, defines filename and
# invoke() function which calls the file selector.
from bpy_extras.io_utils import ImportHelper
from bpy.props import StringProperty, BoolProperty, EnumProperty
from bpy.types import Operator


class MixamoImportFBX(Operator, ImportHelper):
    """Import Mixamo FBX Character file"""
    bl_idname = "import_test.some_data"  # important since its how bpy.ops.import_test.some_data is constructed
    bl_label = "Import Mixamo FBX"

    # ImportHelper mixin class uses this
    filename_ext = ".fbx"

    filter_glob = StringProperty(
            default="*.fbx",
            options={'HIDDEN'},
            )

    def execute(self, context):
        return Import_Mixamo_FBX(context, self.filepath)


# Only needed if you want to add into a dynamic menu
def menu_func_import(self, context):
    self.layout.operator(MixamoImportFBX.bl_idname, text="Import Mixamo FBX")


def register():
    bpy.utils.register_class(MixamoImportFBX)
    bpy.types.INFO_MT_file_import.append(menu_func_import)


def unregister():
    bpy.utils.unregister_class(MixamoImportFBX)
    bpy.types.INFO_MT_file_import.remove(menu_func_import)


if __name__ == "__main__":
    register()

    # test call
    bpy.ops.import_test.some_data('INVOKE_DEFAULT')
