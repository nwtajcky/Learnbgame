#save to ./bgelogic/cells/my_custom_cells.py
#refresh imported nodes after changes have been applied to both custom cells and nodes
import bgelogic

ParameterCell = bgelogic.ParameterCell
LogicNetworkSubCell = bgelogic.LogicNetworkSubCell

#A sample parameter with one input and one custom output that increments a value
class CustomParameterCell(ParameterCell):
    
    #Initializes the cell
    def __init__(self):
        ParameterCell.__init__(self)
        #define a custom output value. Custom outputs need to be wrapped into sub-cells
        #using a LogicNetworkSubCell instance
        self.my_output = LogicNetworkSubCell(self, self.get_my_output)
        #the value that will be returned by the sub-cell mapped to the my_output field
        self.my_output_value = 0
        #the input value of the parameter
        self.my_input = None
        pass
    
    def get_my_output(self): 
        return self.my_output_value
    
    def evaluate(self):
        self._set_ready()
        #get the value from the input field.
        input_value = self.get_parameter_value(self.my_input)
        if input_value is not None:
            self.my_output_value += input_value
        pass
    pass
